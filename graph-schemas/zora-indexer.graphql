schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

scalar ask_event_status_enum

"""
Boolean expression to compare columns of type "ask_event_status_enum". All fields are combined with logical 'AND'.
"""
input ask_event_status_enum_comparison_exp {
  _eq: ask_event_status_enum
  _gt: ask_event_status_enum
  _gte: ask_event_status_enum
  _in: [ask_event_status_enum!]
  _is_null: Boolean
  _lt: ask_event_status_enum
  _lte: ask_event_status_enum
  _neq: ask_event_status_enum
  _nin: [ask_event_status_enum!]
}

"""
columns and relationships of "auction"
"""
type Auction {
  amountTokenOwnerReceived: String

  """An array relationship"""
  approvalEvents(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): [AuctionApprovalUpdatedEvent!]!

  """An aggregate relationship"""
  approvalEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): AuctionApprovalUpdatedEvent_aggregate!
  approved: Boolean
  auctionCurrency: String
  auctionId: String!

  """An array relationship"""
  bidEvents(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): [AuctionBidEvent!]!

  """An aggregate relationship"""
  bidEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): AuctionBidEvent_aggregate!

  """An object relationship"""
  canceledEvent: AuctionCanceledEvent

  """An object relationship"""
  createdEvent: AuctionCreatedEvent
  curator: String
  curatorFee: String
  curatorFeePercentage: Int

  """An object relationship"""
  currency: Currency
  duration: String

  """An array relationship"""
  durationExtendedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): [AuctionDurationExtendedEvent!]!

  """An aggregate relationship"""
  durationExtendedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): AuctionDurationExtendedEvent_aggregate!

  """An object relationship"""
  endedEvent: AuctionEndedEvent
  expiresAt: timestamptz
  firstBidTime: String
  lastBidAmount: String
  lastBidder: String

  """An object relationship"""
  media: Media
  reservePrice: String

  """An array relationship"""
  reservePriceUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): [AuctionReservePriceUpdatedEvent!]!

  """An aggregate relationship"""
  reservePriceUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): AuctionReservePriceUpdatedEvent_aggregate!
  status: auction_status_enum

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!
  tokenOwner: String
  winner: String
}

"""
aggregated selection of "auction"
"""
type Auction_aggregate {
  aggregate: Auction_aggregate_fields
  nodes: [Auction!]!
}

"""
aggregate fields of "auction"
"""
type Auction_aggregate_fields {
  avg: Auction_avg_fields
  count(columns: [Auction_select_column!], distinct: Boolean): Int!
  max: Auction_max_fields
  min: Auction_min_fields
  stddev: Auction_stddev_fields
  stddev_pop: Auction_stddev_pop_fields
  stddev_samp: Auction_stddev_samp_fields
  sum: Auction_sum_fields
  var_pop: Auction_var_pop_fields
  var_samp: Auction_var_samp_fields
  variance: Auction_variance_fields
}

"""
order by aggregate values of table "auction"
"""
input Auction_aggregate_order_by {
  avg: Auction_avg_order_by
  count: order_by
  max: Auction_max_order_by
  min: Auction_min_order_by
  stddev: Auction_stddev_order_by
  stddev_pop: Auction_stddev_pop_order_by
  stddev_samp: Auction_stddev_samp_order_by
  sum: Auction_sum_order_by
  var_pop: Auction_var_pop_order_by
  var_samp: Auction_var_samp_order_by
  variance: Auction_variance_order_by
}

"""aggregate avg on columns"""
type Auction_avg_fields {
  curatorFeePercentage: Float
}

"""
order by avg() on columns of table "auction"
"""
input Auction_avg_order_by {
  curatorFeePercentage: order_by
}

"""
Boolean expression to filter rows from the table "auction". All fields are combined with a logical 'AND'.
"""
input Auction_bool_exp {
  _and: [Auction_bool_exp!]
  _not: Auction_bool_exp
  _or: [Auction_bool_exp!]
  amountTokenOwnerReceived: String_comparison_exp
  approvalEvents: AuctionApprovalUpdatedEvent_bool_exp
  approved: Boolean_comparison_exp
  auctionCurrency: String_comparison_exp
  auctionId: String_comparison_exp
  bidEvents: AuctionBidEvent_bool_exp
  canceledEvent: AuctionCanceledEvent_bool_exp
  createdEvent: AuctionCreatedEvent_bool_exp
  curator: String_comparison_exp
  curatorFee: String_comparison_exp
  curatorFeePercentage: Int_comparison_exp
  currency: Currency_bool_exp
  duration: String_comparison_exp
  durationExtendedEvents: AuctionDurationExtendedEvent_bool_exp
  endedEvent: AuctionEndedEvent_bool_exp
  expiresAt: timestamptz_comparison_exp
  firstBidTime: String_comparison_exp
  lastBidAmount: String_comparison_exp
  lastBidder: String_comparison_exp
  media: Media_bool_exp
  reservePrice: String_comparison_exp
  reservePriceUpdatedEvents: AuctionReservePriceUpdatedEvent_bool_exp
  status: auction_status_enum_comparison_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  tokenOwner: String_comparison_exp
  winner: String_comparison_exp
}

"""aggregate max on columns"""
type Auction_max_fields {
  amountTokenOwnerReceived: String
  auctionCurrency: String
  auctionId: String
  curator: String
  curatorFee: String
  curatorFeePercentage: Int
  duration: String
  expiresAt: timestamptz
  firstBidTime: String
  lastBidAmount: String
  lastBidder: String
  reservePrice: String
  tokenContract: String
  tokenId: String
  tokenOwner: String
  winner: String
}

"""
order by max() on columns of table "auction"
"""
input Auction_max_order_by {
  amountTokenOwnerReceived: order_by
  auctionCurrency: order_by
  auctionId: order_by
  curator: order_by
  curatorFee: order_by
  curatorFeePercentage: order_by
  duration: order_by
  expiresAt: order_by
  firstBidTime: order_by
  lastBidAmount: order_by
  lastBidder: order_by
  reservePrice: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  winner: order_by
}

"""aggregate min on columns"""
type Auction_min_fields {
  amountTokenOwnerReceived: String
  auctionCurrency: String
  auctionId: String
  curator: String
  curatorFee: String
  curatorFeePercentage: Int
  duration: String
  expiresAt: timestamptz
  firstBidTime: String
  lastBidAmount: String
  lastBidder: String
  reservePrice: String
  tokenContract: String
  tokenId: String
  tokenOwner: String
  winner: String
}

"""
order by min() on columns of table "auction"
"""
input Auction_min_order_by {
  amountTokenOwnerReceived: order_by
  auctionCurrency: order_by
  auctionId: order_by
  curator: order_by
  curatorFee: order_by
  curatorFeePercentage: order_by
  duration: order_by
  expiresAt: order_by
  firstBidTime: order_by
  lastBidAmount: order_by
  lastBidder: order_by
  reservePrice: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  winner: order_by
}

"""Ordering options when selecting data from "auction"."""
input Auction_order_by {
  amountTokenOwnerReceived: order_by
  approvalEvents_aggregate: AuctionApprovalUpdatedEvent_aggregate_order_by
  approved: order_by
  auctionCurrency: order_by
  auctionId: order_by
  bidEvents_aggregate: AuctionBidEvent_aggregate_order_by
  canceledEvent: AuctionCanceledEvent_order_by
  createdEvent: AuctionCreatedEvent_order_by
  curator: order_by
  curatorFee: order_by
  curatorFeePercentage: order_by
  currency: Currency_order_by
  duration: order_by
  durationExtendedEvents_aggregate: AuctionDurationExtendedEvent_aggregate_order_by
  endedEvent: AuctionEndedEvent_order_by
  expiresAt: order_by
  firstBidTime: order_by
  lastBidAmount: order_by
  lastBidder: order_by
  media: Media_order_by
  reservePrice: order_by
  reservePriceUpdatedEvents_aggregate: AuctionReservePriceUpdatedEvent_aggregate_order_by
  status: order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  winner: order_by
}

"""
select columns of table "auction"
"""
enum Auction_select_column {
  """column name"""
  amountTokenOwnerReceived

  """column name"""
  approved

  """column name"""
  auctionCurrency

  """column name"""
  auctionId

  """column name"""
  curator

  """column name"""
  curatorFee

  """column name"""
  curatorFeePercentage

  """column name"""
  duration

  """column name"""
  expiresAt

  """column name"""
  firstBidTime

  """column name"""
  lastBidAmount

  """column name"""
  lastBidder

  """column name"""
  reservePrice

  """column name"""
  status

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  tokenOwner

  """column name"""
  winner
}

scalar auction_status_enum

"""
Boolean expression to compare columns of type "auction_status_enum". All fields are combined with logical 'AND'.
"""
input auction_status_enum_comparison_exp {
  _eq: auction_status_enum
  _gt: auction_status_enum
  _gte: auction_status_enum
  _in: [auction_status_enum!]
  _is_null: Boolean
  _lt: auction_status_enum
  _lte: auction_status_enum
  _neq: auction_status_enum
  _nin: [auction_status_enum!]
}

"""aggregate stddev on columns"""
type Auction_stddev_fields {
  curatorFeePercentage: Float
}

"""
order by stddev() on columns of table "auction"
"""
input Auction_stddev_order_by {
  curatorFeePercentage: order_by
}

"""aggregate stddev_pop on columns"""
type Auction_stddev_pop_fields {
  curatorFeePercentage: Float
}

"""
order by stddev_pop() on columns of table "auction"
"""
input Auction_stddev_pop_order_by {
  curatorFeePercentage: order_by
}

"""aggregate stddev_samp on columns"""
type Auction_stddev_samp_fields {
  curatorFeePercentage: Float
}

"""
order by stddev_samp() on columns of table "auction"
"""
input Auction_stddev_samp_order_by {
  curatorFeePercentage: order_by
}

"""aggregate sum on columns"""
type Auction_sum_fields {
  curatorFeePercentage: Int
}

"""
order by sum() on columns of table "auction"
"""
input Auction_sum_order_by {
  curatorFeePercentage: order_by
}

"""aggregate var_pop on columns"""
type Auction_var_pop_fields {
  curatorFeePercentage: Float
}

"""
order by var_pop() on columns of table "auction"
"""
input Auction_var_pop_order_by {
  curatorFeePercentage: order_by
}

"""aggregate var_samp on columns"""
type Auction_var_samp_fields {
  curatorFeePercentage: Float
}

"""
order by var_samp() on columns of table "auction"
"""
input Auction_var_samp_order_by {
  curatorFeePercentage: order_by
}

"""aggregate variance on columns"""
type Auction_variance_fields {
  curatorFeePercentage: Float
}

"""
order by variance() on columns of table "auction"
"""
input Auction_variance_order_by {
  curatorFeePercentage: order_by
}

"""
columns and relationships of "auction_approval_updated_event"
"""
type AuctionApprovalUpdatedEvent {
  address: String!
  approved: Boolean!

  """An object relationship"""
  auction: Auction
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "auction_approval_updated_event"
"""
type AuctionApprovalUpdatedEvent_aggregate {
  aggregate: AuctionApprovalUpdatedEvent_aggregate_fields
  nodes: [AuctionApprovalUpdatedEvent!]!
}

"""
aggregate fields of "auction_approval_updated_event"
"""
type AuctionApprovalUpdatedEvent_aggregate_fields {
  avg: AuctionApprovalUpdatedEvent_avg_fields
  count(columns: [AuctionApprovalUpdatedEvent_select_column!], distinct: Boolean): Int!
  max: AuctionApprovalUpdatedEvent_max_fields
  min: AuctionApprovalUpdatedEvent_min_fields
  stddev: AuctionApprovalUpdatedEvent_stddev_fields
  stddev_pop: AuctionApprovalUpdatedEvent_stddev_pop_fields
  stddev_samp: AuctionApprovalUpdatedEvent_stddev_samp_fields
  sum: AuctionApprovalUpdatedEvent_sum_fields
  var_pop: AuctionApprovalUpdatedEvent_var_pop_fields
  var_samp: AuctionApprovalUpdatedEvent_var_samp_fields
  variance: AuctionApprovalUpdatedEvent_variance_fields
}

"""
order by aggregate values of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_aggregate_order_by {
  avg: AuctionApprovalUpdatedEvent_avg_order_by
  count: order_by
  max: AuctionApprovalUpdatedEvent_max_order_by
  min: AuctionApprovalUpdatedEvent_min_order_by
  stddev: AuctionApprovalUpdatedEvent_stddev_order_by
  stddev_pop: AuctionApprovalUpdatedEvent_stddev_pop_order_by
  stddev_samp: AuctionApprovalUpdatedEvent_stddev_samp_order_by
  sum: AuctionApprovalUpdatedEvent_sum_order_by
  var_pop: AuctionApprovalUpdatedEvent_var_pop_order_by
  var_samp: AuctionApprovalUpdatedEvent_var_samp_order_by
  variance: AuctionApprovalUpdatedEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionApprovalUpdatedEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table
"auction_approval_updated_event". All fields are combined with a logical 'AND'.
"""
input AuctionApprovalUpdatedEvent_bool_exp {
  _and: [AuctionApprovalUpdatedEvent_bool_exp!]
  _not: AuctionApprovalUpdatedEvent_bool_exp
  _or: [AuctionApprovalUpdatedEvent_bool_exp!]
  address: String_comparison_exp
  approved: Boolean_comparison_exp
  auction: Auction_bool_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionApprovalUpdatedEvent_max_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_max_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type AuctionApprovalUpdatedEvent_min_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_min_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""
Ordering options when selecting data from "auction_approval_updated_event".
"""
input AuctionApprovalUpdatedEvent_order_by {
  address: order_by
  approved: order_by
  auction: Auction_order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "auction_approval_updated_event"
"""
enum AuctionApprovalUpdatedEvent_select_column {
  """column name"""
  address

  """column name"""
  approved

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type AuctionApprovalUpdatedEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionApprovalUpdatedEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionApprovalUpdatedEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionApprovalUpdatedEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionApprovalUpdatedEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionApprovalUpdatedEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionApprovalUpdatedEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_approval_updated_event"
"""
input AuctionApprovalUpdatedEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "auction_bid_event"
"""
type AuctionBidEvent {
  address: String!

  """An object relationship"""
  auction: Auction
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  extended: Boolean!
  firstBid: Boolean!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  sender: String!

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
  value: String!
}

"""
aggregated selection of "auction_bid_event"
"""
type AuctionBidEvent_aggregate {
  aggregate: AuctionBidEvent_aggregate_fields
  nodes: [AuctionBidEvent!]!
}

"""
aggregate fields of "auction_bid_event"
"""
type AuctionBidEvent_aggregate_fields {
  avg: AuctionBidEvent_avg_fields
  count(columns: [AuctionBidEvent_select_column!], distinct: Boolean): Int!
  max: AuctionBidEvent_max_fields
  min: AuctionBidEvent_min_fields
  stddev: AuctionBidEvent_stddev_fields
  stddev_pop: AuctionBidEvent_stddev_pop_fields
  stddev_samp: AuctionBidEvent_stddev_samp_fields
  sum: AuctionBidEvent_sum_fields
  var_pop: AuctionBidEvent_var_pop_fields
  var_samp: AuctionBidEvent_var_samp_fields
  variance: AuctionBidEvent_variance_fields
}

"""
order by aggregate values of table "auction_bid_event"
"""
input AuctionBidEvent_aggregate_order_by {
  avg: AuctionBidEvent_avg_order_by
  count: order_by
  max: AuctionBidEvent_max_order_by
  min: AuctionBidEvent_min_order_by
  stddev: AuctionBidEvent_stddev_order_by
  stddev_pop: AuctionBidEvent_stddev_pop_order_by
  stddev_samp: AuctionBidEvent_stddev_samp_order_by
  sum: AuctionBidEvent_sum_order_by
  var_pop: AuctionBidEvent_var_pop_order_by
  var_samp: AuctionBidEvent_var_samp_order_by
  variance: AuctionBidEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionBidEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "auction_bid_event". All fields are combined with a logical 'AND'.
"""
input AuctionBidEvent_bool_exp {
  _and: [AuctionBidEvent_bool_exp!]
  _not: AuctionBidEvent_bool_exp
  _or: [AuctionBidEvent_bool_exp!]
  address: String_comparison_exp
  auction: Auction_bool_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  extended: Boolean_comparison_exp
  firstBid: Boolean_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  sender: String_comparison_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
  value: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionBidEvent_max_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  sender: String
  tokenContract: String
  tokenId: String
  transactionHash: String
  value: String
}

"""
order by max() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_max_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  sender: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
  value: order_by
}

"""aggregate min on columns"""
type AuctionBidEvent_min_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  sender: String
  tokenContract: String
  tokenId: String
  transactionHash: String
  value: String
}

"""
order by min() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_min_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  sender: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
  value: order_by
}

"""Ordering options when selecting data from "auction_bid_event"."""
input AuctionBidEvent_order_by {
  address: order_by
  auction: Auction_order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  extended: order_by
  firstBid: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  sender: order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
  value: order_by
}

"""
select columns of table "auction_bid_event"
"""
enum AuctionBidEvent_select_column {
  """column name"""
  address

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  eventLogId

  """column name"""
  extended

  """column name"""
  firstBid

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  sender

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  transactionHash

  """column name"""
  value
}

"""aggregate stddev on columns"""
type AuctionBidEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionBidEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionBidEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionBidEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionBidEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionBidEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionBidEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_bid_event"
"""
input AuctionBidEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "auction_canceled_event"
"""
type AuctionCanceledEvent {
  address: String!

  """An object relationship"""
  auction: Auction
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!
  tokenOwner: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "auction_canceled_event"
"""
type AuctionCanceledEvent_aggregate {
  aggregate: AuctionCanceledEvent_aggregate_fields
  nodes: [AuctionCanceledEvent!]!
}

"""
aggregate fields of "auction_canceled_event"
"""
type AuctionCanceledEvent_aggregate_fields {
  avg: AuctionCanceledEvent_avg_fields
  count(columns: [AuctionCanceledEvent_select_column!], distinct: Boolean): Int!
  max: AuctionCanceledEvent_max_fields
  min: AuctionCanceledEvent_min_fields
  stddev: AuctionCanceledEvent_stddev_fields
  stddev_pop: AuctionCanceledEvent_stddev_pop_fields
  stddev_samp: AuctionCanceledEvent_stddev_samp_fields
  sum: AuctionCanceledEvent_sum_fields
  var_pop: AuctionCanceledEvent_var_pop_fields
  var_samp: AuctionCanceledEvent_var_samp_fields
  variance: AuctionCanceledEvent_variance_fields
}

"""
order by aggregate values of table "auction_canceled_event"
"""
input AuctionCanceledEvent_aggregate_order_by {
  avg: AuctionCanceledEvent_avg_order_by
  count: order_by
  max: AuctionCanceledEvent_max_order_by
  min: AuctionCanceledEvent_min_order_by
  stddev: AuctionCanceledEvent_stddev_order_by
  stddev_pop: AuctionCanceledEvent_stddev_pop_order_by
  stddev_samp: AuctionCanceledEvent_stddev_samp_order_by
  sum: AuctionCanceledEvent_sum_order_by
  var_pop: AuctionCanceledEvent_var_pop_order_by
  var_samp: AuctionCanceledEvent_var_samp_order_by
  variance: AuctionCanceledEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionCanceledEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "auction_canceled_event". All fields are combined with a logical 'AND'.
"""
input AuctionCanceledEvent_bool_exp {
  _and: [AuctionCanceledEvent_bool_exp!]
  _not: AuctionCanceledEvent_bool_exp
  _or: [AuctionCanceledEvent_bool_exp!]
  address: String_comparison_exp
  auction: Auction_bool_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  tokenOwner: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionCanceledEvent_max_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  tokenOwner: String
  transactionHash: String
}

"""
order by max() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_max_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type AuctionCanceledEvent_min_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  tokenOwner: String
  transactionHash: String
}

"""
order by min() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_min_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "auction_canceled_event"."""
input AuctionCanceledEvent_order_by {
  address: order_by
  auction: Auction_order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "auction_canceled_event"
"""
enum AuctionCanceledEvent_select_column {
  """column name"""
  address

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  tokenOwner

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type AuctionCanceledEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionCanceledEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionCanceledEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionCanceledEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionCanceledEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionCanceledEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionCanceledEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_canceled_event"
"""
input AuctionCanceledEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "auction_created_event"
"""
type AuctionCreatedEvent {
  address: String!

  """An object relationship"""
  auction: Auction
  auctionCurrency: String!
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  curator: String!
  curatorFeePercentage: Int!
  duration: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  reservePrice: String!

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!
  tokenOwner: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "auction_created_event"
"""
type AuctionCreatedEvent_aggregate {
  aggregate: AuctionCreatedEvent_aggregate_fields
  nodes: [AuctionCreatedEvent!]!
}

"""
aggregate fields of "auction_created_event"
"""
type AuctionCreatedEvent_aggregate_fields {
  avg: AuctionCreatedEvent_avg_fields
  count(columns: [AuctionCreatedEvent_select_column!], distinct: Boolean): Int!
  max: AuctionCreatedEvent_max_fields
  min: AuctionCreatedEvent_min_fields
  stddev: AuctionCreatedEvent_stddev_fields
  stddev_pop: AuctionCreatedEvent_stddev_pop_fields
  stddev_samp: AuctionCreatedEvent_stddev_samp_fields
  sum: AuctionCreatedEvent_sum_fields
  var_pop: AuctionCreatedEvent_var_pop_fields
  var_samp: AuctionCreatedEvent_var_samp_fields
  variance: AuctionCreatedEvent_variance_fields
}

"""
order by aggregate values of table "auction_created_event"
"""
input AuctionCreatedEvent_aggregate_order_by {
  avg: AuctionCreatedEvent_avg_order_by
  count: order_by
  max: AuctionCreatedEvent_max_order_by
  min: AuctionCreatedEvent_min_order_by
  stddev: AuctionCreatedEvent_stddev_order_by
  stddev_pop: AuctionCreatedEvent_stddev_pop_order_by
  stddev_samp: AuctionCreatedEvent_stddev_samp_order_by
  sum: AuctionCreatedEvent_sum_order_by
  var_pop: AuctionCreatedEvent_var_pop_order_by
  var_samp: AuctionCreatedEvent_var_samp_order_by
  variance: AuctionCreatedEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionCreatedEvent_avg_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_avg_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "auction_created_event". All fields are combined with a logical 'AND'.
"""
input AuctionCreatedEvent_bool_exp {
  _and: [AuctionCreatedEvent_bool_exp!]
  _not: AuctionCreatedEvent_bool_exp
  _or: [AuctionCreatedEvent_bool_exp!]
  address: String_comparison_exp
  auction: Auction_bool_exp
  auctionCurrency: String_comparison_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  curator: String_comparison_exp
  curatorFeePercentage: Int_comparison_exp
  duration: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  reservePrice: String_comparison_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  tokenOwner: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionCreatedEvent_max_fields {
  address: String
  auctionCurrency: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  curator: String
  curatorFeePercentage: Int
  duration: String
  eventLogId: String
  id: String
  logIndex: Int
  reservePrice: String
  tokenContract: String
  tokenId: String
  tokenOwner: String
  transactionHash: String
}

"""
order by max() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_max_order_by {
  address: order_by
  auctionCurrency: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  curator: order_by
  curatorFeePercentage: order_by
  duration: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  reservePrice: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type AuctionCreatedEvent_min_fields {
  address: String
  auctionCurrency: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  curator: String
  curatorFeePercentage: Int
  duration: String
  eventLogId: String
  id: String
  logIndex: Int
  reservePrice: String
  tokenContract: String
  tokenId: String
  tokenOwner: String
  transactionHash: String
}

"""
order by min() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_min_order_by {
  address: order_by
  auctionCurrency: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  curator: order_by
  curatorFeePercentage: order_by
  duration: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  reservePrice: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "auction_created_event"."""
input AuctionCreatedEvent_order_by {
  address: order_by
  auction: Auction_order_by
  auctionCurrency: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  curator: order_by
  curatorFeePercentage: order_by
  duration: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  reservePrice: order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "auction_created_event"
"""
enum AuctionCreatedEvent_select_column {
  """column name"""
  address

  """column name"""
  auctionCurrency

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  curator

  """column name"""
  curatorFeePercentage

  """column name"""
  duration

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  reservePrice

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  tokenOwner

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type AuctionCreatedEvent_stddev_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_stddev_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionCreatedEvent_stddev_pop_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_stddev_pop_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionCreatedEvent_stddev_samp_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_stddev_samp_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionCreatedEvent_sum_fields {
  blockNumber: Int
  curatorFeePercentage: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_sum_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionCreatedEvent_var_pop_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_var_pop_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionCreatedEvent_var_samp_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_var_samp_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionCreatedEvent_variance_fields {
  blockNumber: Float
  curatorFeePercentage: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_created_event"
"""
input AuctionCreatedEvent_variance_order_by {
  blockNumber: order_by
  curatorFeePercentage: order_by
  logIndex: order_by
}

"""
columns and relationships of "auction_duration_extended_event"
"""
type AuctionDurationExtendedEvent {
  address: String!

  """An object relationship"""
  auction: Auction
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  duration: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "auction_duration_extended_event"
"""
type AuctionDurationExtendedEvent_aggregate {
  aggregate: AuctionDurationExtendedEvent_aggregate_fields
  nodes: [AuctionDurationExtendedEvent!]!
}

"""
aggregate fields of "auction_duration_extended_event"
"""
type AuctionDurationExtendedEvent_aggregate_fields {
  avg: AuctionDurationExtendedEvent_avg_fields
  count(columns: [AuctionDurationExtendedEvent_select_column!], distinct: Boolean): Int!
  max: AuctionDurationExtendedEvent_max_fields
  min: AuctionDurationExtendedEvent_min_fields
  stddev: AuctionDurationExtendedEvent_stddev_fields
  stddev_pop: AuctionDurationExtendedEvent_stddev_pop_fields
  stddev_samp: AuctionDurationExtendedEvent_stddev_samp_fields
  sum: AuctionDurationExtendedEvent_sum_fields
  var_pop: AuctionDurationExtendedEvent_var_pop_fields
  var_samp: AuctionDurationExtendedEvent_var_samp_fields
  variance: AuctionDurationExtendedEvent_variance_fields
}

"""
order by aggregate values of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_aggregate_order_by {
  avg: AuctionDurationExtendedEvent_avg_order_by
  count: order_by
  max: AuctionDurationExtendedEvent_max_order_by
  min: AuctionDurationExtendedEvent_min_order_by
  stddev: AuctionDurationExtendedEvent_stddev_order_by
  stddev_pop: AuctionDurationExtendedEvent_stddev_pop_order_by
  stddev_samp: AuctionDurationExtendedEvent_stddev_samp_order_by
  sum: AuctionDurationExtendedEvent_sum_order_by
  var_pop: AuctionDurationExtendedEvent_var_pop_order_by
  var_samp: AuctionDurationExtendedEvent_var_samp_order_by
  variance: AuctionDurationExtendedEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionDurationExtendedEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table
"auction_duration_extended_event". All fields are combined with a logical 'AND'.
"""
input AuctionDurationExtendedEvent_bool_exp {
  _and: [AuctionDurationExtendedEvent_bool_exp!]
  _not: AuctionDurationExtendedEvent_bool_exp
  _or: [AuctionDurationExtendedEvent_bool_exp!]
  address: String_comparison_exp
  auction: Auction_bool_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  duration: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionDurationExtendedEvent_max_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  duration: String
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_max_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  duration: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type AuctionDurationExtendedEvent_min_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  duration: String
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_min_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  duration: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""
Ordering options when selecting data from "auction_duration_extended_event".
"""
input AuctionDurationExtendedEvent_order_by {
  address: order_by
  auction: Auction_order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  duration: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "auction_duration_extended_event"
"""
enum AuctionDurationExtendedEvent_select_column {
  """column name"""
  address

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  duration

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type AuctionDurationExtendedEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionDurationExtendedEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionDurationExtendedEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionDurationExtendedEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionDurationExtendedEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionDurationExtendedEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionDurationExtendedEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_duration_extended_event"
"""
input AuctionDurationExtendedEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "auction_ended_event"
"""
type AuctionEndedEvent {
  address: String!
  amount: String!

  """An object relationship"""
  auction: Auction
  auctionCurrency: String!
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  curator: String!
  curatorFee: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!
  tokenOwner: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
  winner: String!
}

"""
aggregated selection of "auction_ended_event"
"""
type AuctionEndedEvent_aggregate {
  aggregate: AuctionEndedEvent_aggregate_fields
  nodes: [AuctionEndedEvent!]!
}

"""
aggregate fields of "auction_ended_event"
"""
type AuctionEndedEvent_aggregate_fields {
  avg: AuctionEndedEvent_avg_fields
  count(columns: [AuctionEndedEvent_select_column!], distinct: Boolean): Int!
  max: AuctionEndedEvent_max_fields
  min: AuctionEndedEvent_min_fields
  stddev: AuctionEndedEvent_stddev_fields
  stddev_pop: AuctionEndedEvent_stddev_pop_fields
  stddev_samp: AuctionEndedEvent_stddev_samp_fields
  sum: AuctionEndedEvent_sum_fields
  var_pop: AuctionEndedEvent_var_pop_fields
  var_samp: AuctionEndedEvent_var_samp_fields
  variance: AuctionEndedEvent_variance_fields
}

"""
order by aggregate values of table "auction_ended_event"
"""
input AuctionEndedEvent_aggregate_order_by {
  avg: AuctionEndedEvent_avg_order_by
  count: order_by
  max: AuctionEndedEvent_max_order_by
  min: AuctionEndedEvent_min_order_by
  stddev: AuctionEndedEvent_stddev_order_by
  stddev_pop: AuctionEndedEvent_stddev_pop_order_by
  stddev_samp: AuctionEndedEvent_stddev_samp_order_by
  sum: AuctionEndedEvent_sum_order_by
  var_pop: AuctionEndedEvent_var_pop_order_by
  var_samp: AuctionEndedEvent_var_samp_order_by
  variance: AuctionEndedEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionEndedEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "auction_ended_event". All fields are combined with a logical 'AND'.
"""
input AuctionEndedEvent_bool_exp {
  _and: [AuctionEndedEvent_bool_exp!]
  _not: AuctionEndedEvent_bool_exp
  _or: [AuctionEndedEvent_bool_exp!]
  address: String_comparison_exp
  amount: String_comparison_exp
  auction: Auction_bool_exp
  auctionCurrency: String_comparison_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  curator: String_comparison_exp
  curatorFee: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  tokenOwner: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
  winner: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionEndedEvent_max_fields {
  address: String
  amount: String
  auctionCurrency: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  curator: String
  curatorFee: String
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  tokenOwner: String
  transactionHash: String
  winner: String
}

"""
order by max() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_max_order_by {
  address: order_by
  amount: order_by
  auctionCurrency: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  curator: order_by
  curatorFee: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transactionHash: order_by
  winner: order_by
}

"""aggregate min on columns"""
type AuctionEndedEvent_min_fields {
  address: String
  amount: String
  auctionCurrency: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  curator: String
  curatorFee: String
  eventLogId: String
  id: String
  logIndex: Int
  tokenContract: String
  tokenId: String
  tokenOwner: String
  transactionHash: String
  winner: String
}

"""
order by min() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_min_order_by {
  address: order_by
  amount: order_by
  auctionCurrency: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  curator: order_by
  curatorFee: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transactionHash: order_by
  winner: order_by
}

"""Ordering options when selecting data from "auction_ended_event"."""
input AuctionEndedEvent_order_by {
  address: order_by
  amount: order_by
  auction: Auction_order_by
  auctionCurrency: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  curator: order_by
  curatorFee: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  tokenOwner: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
  winner: order_by
}

"""
select columns of table "auction_ended_event"
"""
enum AuctionEndedEvent_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  auctionCurrency

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  curator

  """column name"""
  curatorFee

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  tokenOwner

  """column name"""
  transactionHash

  """column name"""
  winner
}

"""aggregate stddev on columns"""
type AuctionEndedEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionEndedEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionEndedEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionEndedEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionEndedEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionEndedEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionEndedEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_ended_event"
"""
input AuctionEndedEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "auction_reserve_price_updated_event"
"""
type AuctionReservePriceUpdatedEvent {
  address: String!

  """An object relationship"""
  auction: Auction
  auctionId: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  reservePrice: String!

  """An object relationship"""
  token: Token
  tokenContract: String!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "auction_reserve_price_updated_event"
"""
type AuctionReservePriceUpdatedEvent_aggregate {
  aggregate: AuctionReservePriceUpdatedEvent_aggregate_fields
  nodes: [AuctionReservePriceUpdatedEvent!]!
}

"""
aggregate fields of "auction_reserve_price_updated_event"
"""
type AuctionReservePriceUpdatedEvent_aggregate_fields {
  avg: AuctionReservePriceUpdatedEvent_avg_fields
  count(columns: [AuctionReservePriceUpdatedEvent_select_column!], distinct: Boolean): Int!
  max: AuctionReservePriceUpdatedEvent_max_fields
  min: AuctionReservePriceUpdatedEvent_min_fields
  stddev: AuctionReservePriceUpdatedEvent_stddev_fields
  stddev_pop: AuctionReservePriceUpdatedEvent_stddev_pop_fields
  stddev_samp: AuctionReservePriceUpdatedEvent_stddev_samp_fields
  sum: AuctionReservePriceUpdatedEvent_sum_fields
  var_pop: AuctionReservePriceUpdatedEvent_var_pop_fields
  var_samp: AuctionReservePriceUpdatedEvent_var_samp_fields
  variance: AuctionReservePriceUpdatedEvent_variance_fields
}

"""
order by aggregate values of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_aggregate_order_by {
  avg: AuctionReservePriceUpdatedEvent_avg_order_by
  count: order_by
  max: AuctionReservePriceUpdatedEvent_max_order_by
  min: AuctionReservePriceUpdatedEvent_min_order_by
  stddev: AuctionReservePriceUpdatedEvent_stddev_order_by
  stddev_pop: AuctionReservePriceUpdatedEvent_stddev_pop_order_by
  stddev_samp: AuctionReservePriceUpdatedEvent_stddev_samp_order_by
  sum: AuctionReservePriceUpdatedEvent_sum_order_by
  var_pop: AuctionReservePriceUpdatedEvent_var_pop_order_by
  var_samp: AuctionReservePriceUpdatedEvent_var_samp_order_by
  variance: AuctionReservePriceUpdatedEvent_variance_order_by
}

"""aggregate avg on columns"""
type AuctionReservePriceUpdatedEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table
"auction_reserve_price_updated_event". All fields are combined with a logical 'AND'.
"""
input AuctionReservePriceUpdatedEvent_bool_exp {
  _and: [AuctionReservePriceUpdatedEvent_bool_exp!]
  _not: AuctionReservePriceUpdatedEvent_bool_exp
  _or: [AuctionReservePriceUpdatedEvent_bool_exp!]
  address: String_comparison_exp
  auction: Auction_bool_exp
  auctionId: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  reservePrice: String_comparison_exp
  token: Token_bool_exp
  tokenContract: String_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type AuctionReservePriceUpdatedEvent_max_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  reservePrice: String
  tokenContract: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_max_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  reservePrice: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type AuctionReservePriceUpdatedEvent_min_fields {
  address: String
  auctionId: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  reservePrice: String
  tokenContract: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_min_order_by {
  address: order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  reservePrice: order_by
  tokenContract: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""
Ordering options when selecting data from "auction_reserve_price_updated_event".
"""
input AuctionReservePriceUpdatedEvent_order_by {
  address: order_by
  auction: Auction_order_by
  auctionId: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  reservePrice: order_by
  token: Token_order_by
  tokenContract: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "auction_reserve_price_updated_event"
"""
enum AuctionReservePriceUpdatedEvent_select_column {
  """column name"""
  address

  """column name"""
  auctionId

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  reservePrice

  """column name"""
  tokenContract

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type AuctionReservePriceUpdatedEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type AuctionReservePriceUpdatedEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type AuctionReservePriceUpdatedEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type AuctionReservePriceUpdatedEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type AuctionReservePriceUpdatedEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type AuctionReservePriceUpdatedEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type AuctionReservePriceUpdatedEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "auction_reserve_price_updated_event"
"""
input AuctionReservePriceUpdatedEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

scalar bid_event_status_enum

"""
Boolean expression to compare columns of type "bid_event_status_enum". All fields are combined with logical 'AND'.
"""
input bid_event_status_enum_comparison_exp {
  _eq: bid_event_status_enum
  _gt: bid_event_status_enum
  _gte: bid_event_status_enum
  _in: [bid_event_status_enum!]
  _is_null: Boolean
  _lt: bid_event_status_enum
  _lte: bid_event_status_enum
  _neq: bid_event_status_enum
  _nin: [bid_event_status_enum!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "currency"
"""
type Currency {
  address: String!
  decimals: Int!
  name: String!
  symbol: String!
}

"""
aggregated selection of "currency"
"""
type Currency_aggregate {
  aggregate: Currency_aggregate_fields
  nodes: [Currency!]!
}

"""
aggregate fields of "currency"
"""
type Currency_aggregate_fields {
  avg: Currency_avg_fields
  count(columns: [Currency_select_column!], distinct: Boolean): Int!
  max: Currency_max_fields
  min: Currency_min_fields
  stddev: Currency_stddev_fields
  stddev_pop: Currency_stddev_pop_fields
  stddev_samp: Currency_stddev_samp_fields
  sum: Currency_sum_fields
  var_pop: Currency_var_pop_fields
  var_samp: Currency_var_samp_fields
  variance: Currency_variance_fields
}

"""aggregate avg on columns"""
type Currency_avg_fields {
  decimals: Float
}

"""
Boolean expression to filter rows from the table "currency". All fields are combined with a logical 'AND'.
"""
input Currency_bool_exp {
  _and: [Currency_bool_exp!]
  _not: Currency_bool_exp
  _or: [Currency_bool_exp!]
  address: String_comparison_exp
  decimals: Int_comparison_exp
  name: String_comparison_exp
  symbol: String_comparison_exp
}

"""aggregate max on columns"""
type Currency_max_fields {
  address: String
  decimals: Int
  name: String
  symbol: String
}

"""aggregate min on columns"""
type Currency_min_fields {
  address: String
  decimals: Int
  name: String
  symbol: String
}

"""Ordering options when selecting data from "currency"."""
input Currency_order_by {
  address: order_by
  decimals: order_by
  name: order_by
  symbol: order_by
}

"""
select columns of table "currency"
"""
enum Currency_select_column {
  """column name"""
  address

  """column name"""
  decimals

  """column name"""
  name

  """column name"""
  symbol
}

"""aggregate stddev on columns"""
type Currency_stddev_fields {
  decimals: Float
}

"""aggregate stddev_pop on columns"""
type Currency_stddev_pop_fields {
  decimals: Float
}

"""aggregate stddev_samp on columns"""
type Currency_stddev_samp_fields {
  decimals: Float
}

"""aggregate sum on columns"""
type Currency_sum_fields {
  decimals: Int
}

"""aggregate var_pop on columns"""
type Currency_var_pop_fields {
  decimals: Float
}

"""aggregate var_samp on columns"""
type Currency_var_samp_fields {
  decimals: Float
}

"""aggregate variance on columns"""
type Currency_variance_fields {
  decimals: Float
}

"""
columns and relationships of "raw_log"
"""
type EventLog {
  address: String!

  """An object relationship"""
  auctionApprovalUpdatedEvent: AuctionApprovalUpdatedEvent

  """An object relationship"""
  auctionBidEvent: AuctionBidEvent

  """An object relationship"""
  auctionCanceledEvent: AuctionCanceledEvent

  """An object relationship"""
  auctionCreatedEvent: AuctionCreatedEvent

  """An object relationship"""
  auctionDurationExtendedEvent: AuctionDurationExtendedEvent

  """An object relationship"""
  auctionEndedEvent: AuctionEndedEvent

  """An object relationship"""
  auctionReservePriceUpdatedEvent: AuctionReservePriceUpdatedEvent
  blockHash: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  data: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  marketAskEvent: MarketAskEvent

  """An object relationship"""
  marketBidEvent: MarketBidEvent

  """An object relationship"""
  marketBidShareUpdatedEvent: MarketBidShareEvent

  """An object relationship"""
  mediaMint: MediaMint

  """An object relationship"""
  mediaTokenMetadataURIUpdatedEvent: MediaTokenMetadataURIUpdatedEvent

  """An object relationship"""
  mediaTokenURIUpdatedEvent: MediaTokenURIUpdatedEvent

  """An object relationship"""
  tokenTransferEvent: TokenTransferEvent
  topics(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "raw_log"
"""
type EventLog_aggregate {
  aggregate: EventLog_aggregate_fields
  nodes: [EventLog!]!
}

"""
aggregate fields of "raw_log"
"""
type EventLog_aggregate_fields {
  avg: EventLog_avg_fields
  count(columns: [EventLog_select_column!], distinct: Boolean): Int!
  max: EventLog_max_fields
  min: EventLog_min_fields
  stddev: EventLog_stddev_fields
  stddev_pop: EventLog_stddev_pop_fields
  stddev_samp: EventLog_stddev_samp_fields
  sum: EventLog_sum_fields
  var_pop: EventLog_var_pop_fields
  var_samp: EventLog_var_samp_fields
  variance: EventLog_variance_fields
}

"""
order by aggregate values of table "raw_log"
"""
input EventLog_aggregate_order_by {
  avg: EventLog_avg_order_by
  count: order_by
  max: EventLog_max_order_by
  min: EventLog_min_order_by
  stddev: EventLog_stddev_order_by
  stddev_pop: EventLog_stddev_pop_order_by
  stddev_samp: EventLog_stddev_samp_order_by
  sum: EventLog_sum_order_by
  var_pop: EventLog_var_pop_order_by
  var_samp: EventLog_var_samp_order_by
  variance: EventLog_variance_order_by
}

"""aggregate avg on columns"""
type EventLog_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "raw_log"
"""
input EventLog_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "raw_log". All fields are combined with a logical 'AND'.
"""
input EventLog_bool_exp {
  _and: [EventLog_bool_exp!]
  _not: EventLog_bool_exp
  _or: [EventLog_bool_exp!]
  address: String_comparison_exp
  auctionApprovalUpdatedEvent: AuctionApprovalUpdatedEvent_bool_exp
  auctionBidEvent: AuctionBidEvent_bool_exp
  auctionCanceledEvent: AuctionCanceledEvent_bool_exp
  auctionCreatedEvent: AuctionCreatedEvent_bool_exp
  auctionDurationExtendedEvent: AuctionDurationExtendedEvent_bool_exp
  auctionEndedEvent: AuctionEndedEvent_bool_exp
  auctionReservePriceUpdatedEvent: AuctionReservePriceUpdatedEvent_bool_exp
  blockHash: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  data: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  marketAskEvent: MarketAskEvent_bool_exp
  marketBidEvent: MarketBidEvent_bool_exp
  marketBidShareUpdatedEvent: MarketBidShareEvent_bool_exp
  mediaMint: MediaMint_bool_exp
  mediaTokenMetadataURIUpdatedEvent: MediaTokenMetadataURIUpdatedEvent_bool_exp
  mediaTokenURIUpdatedEvent: MediaTokenURIUpdatedEvent_bool_exp
  tokenTransferEvent: TokenTransferEvent_bool_exp
  topics: jsonb_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type EventLog_max_fields {
  address: String
  blockHash: String
  blockNumber: Int
  blockTimestamp: timestamp
  data: String
  id: String
  logIndex: Int
  transactionHash: String
}

"""
order by max() on columns of table "raw_log"
"""
input EventLog_max_order_by {
  address: order_by
  blockHash: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  data: order_by
  id: order_by
  logIndex: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type EventLog_min_fields {
  address: String
  blockHash: String
  blockNumber: Int
  blockTimestamp: timestamp
  data: String
  id: String
  logIndex: Int
  transactionHash: String
}

"""
order by min() on columns of table "raw_log"
"""
input EventLog_min_order_by {
  address: order_by
  blockHash: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  data: order_by
  id: order_by
  logIndex: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "raw_log"."""
input EventLog_order_by {
  address: order_by
  auctionApprovalUpdatedEvent: AuctionApprovalUpdatedEvent_order_by
  auctionBidEvent: AuctionBidEvent_order_by
  auctionCanceledEvent: AuctionCanceledEvent_order_by
  auctionCreatedEvent: AuctionCreatedEvent_order_by
  auctionDurationExtendedEvent: AuctionDurationExtendedEvent_order_by
  auctionEndedEvent: AuctionEndedEvent_order_by
  auctionReservePriceUpdatedEvent: AuctionReservePriceUpdatedEvent_order_by
  blockHash: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  data: order_by
  id: order_by
  logIndex: order_by
  marketAskEvent: MarketAskEvent_order_by
  marketBidEvent: MarketBidEvent_order_by
  marketBidShareUpdatedEvent: MarketBidShareEvent_order_by
  mediaMint: MediaMint_order_by
  mediaTokenMetadataURIUpdatedEvent: MediaTokenMetadataURIUpdatedEvent_order_by
  mediaTokenURIUpdatedEvent: MediaTokenURIUpdatedEvent_order_by
  tokenTransferEvent: TokenTransferEvent_order_by
  topics: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "raw_log"
"""
enum EventLog_select_column {
  """column name"""
  address

  """column name"""
  blockHash

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  data

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  topics

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type EventLog_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "raw_log"
"""
input EventLog_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type EventLog_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "raw_log"
"""
input EventLog_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type EventLog_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "raw_log"
"""
input EventLog_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type EventLog_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "raw_log"
"""
input EventLog_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type EventLog_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "raw_log"
"""
input EventLog_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type EventLog_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "raw_log"
"""
input EventLog_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type EventLog_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "raw_log"
"""
input EventLog_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "ask"
"""
type MarketAsk {
  address: String
  amount: String
  currencyAddress: String

  """An object relationship"""
  media: Media
  status: ask_event_status_enum
  tokenId: String
}

"""
aggregated selection of "ask"
"""
type MarketAsk_aggregate {
  aggregate: MarketAsk_aggregate_fields
  nodes: [MarketAsk!]!
}

"""
aggregate fields of "ask"
"""
type MarketAsk_aggregate_fields {
  count(columns: [MarketAsk_select_column!], distinct: Boolean): Int!
  max: MarketAsk_max_fields
  min: MarketAsk_min_fields
}

"""
order by aggregate values of table "ask"
"""
input MarketAsk_aggregate_order_by {
  count: order_by
  max: MarketAsk_max_order_by
  min: MarketAsk_min_order_by
}

"""
Boolean expression to filter rows from the table "ask". All fields are combined with a logical 'AND'.
"""
input MarketAsk_bool_exp {
  _and: [MarketAsk_bool_exp!]
  _not: MarketAsk_bool_exp
  _or: [MarketAsk_bool_exp!]
  address: String_comparison_exp
  amount: String_comparison_exp
  currencyAddress: String_comparison_exp
  media: Media_bool_exp
  status: ask_event_status_enum_comparison_exp
  tokenId: String_comparison_exp
}

"""aggregate max on columns"""
type MarketAsk_max_fields {
  address: String
  amount: String
  currencyAddress: String
  tokenId: String
}

"""
order by max() on columns of table "ask"
"""
input MarketAsk_max_order_by {
  address: order_by
  amount: order_by
  currencyAddress: order_by
  tokenId: order_by
}

"""aggregate min on columns"""
type MarketAsk_min_fields {
  address: String
  amount: String
  currencyAddress: String
  tokenId: String
}

"""
order by min() on columns of table "ask"
"""
input MarketAsk_min_order_by {
  address: order_by
  amount: order_by
  currencyAddress: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "ask"."""
input MarketAsk_order_by {
  address: order_by
  amount: order_by
  currencyAddress: order_by
  media: Media_order_by
  status: order_by
  tokenId: order_by
}

"""
select columns of table "ask"
"""
enum MarketAsk_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  currencyAddress

  """column name"""
  status

  """column name"""
  tokenId
}

"""
columns and relationships of "ask_event"
"""
type MarketAskEvent {
  address: String!
  amount: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  currency: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  status: ask_event_status_enum!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "ask_event"
"""
type MarketAskEvent_aggregate {
  aggregate: MarketAskEvent_aggregate_fields
  nodes: [MarketAskEvent!]!
}

"""
aggregate fields of "ask_event"
"""
type MarketAskEvent_aggregate_fields {
  avg: MarketAskEvent_avg_fields
  count(columns: [MarketAskEvent_select_column!], distinct: Boolean): Int!
  max: MarketAskEvent_max_fields
  min: MarketAskEvent_min_fields
  stddev: MarketAskEvent_stddev_fields
  stddev_pop: MarketAskEvent_stddev_pop_fields
  stddev_samp: MarketAskEvent_stddev_samp_fields
  sum: MarketAskEvent_sum_fields
  var_pop: MarketAskEvent_var_pop_fields
  var_samp: MarketAskEvent_var_samp_fields
  variance: MarketAskEvent_variance_fields
}

"""
order by aggregate values of table "ask_event"
"""
input MarketAskEvent_aggregate_order_by {
  avg: MarketAskEvent_avg_order_by
  count: order_by
  max: MarketAskEvent_max_order_by
  min: MarketAskEvent_min_order_by
  stddev: MarketAskEvent_stddev_order_by
  stddev_pop: MarketAskEvent_stddev_pop_order_by
  stddev_samp: MarketAskEvent_stddev_samp_order_by
  sum: MarketAskEvent_sum_order_by
  var_pop: MarketAskEvent_var_pop_order_by
  var_samp: MarketAskEvent_var_samp_order_by
  variance: MarketAskEvent_variance_order_by
}

"""aggregate avg on columns"""
type MarketAskEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "ask_event"
"""
input MarketAskEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "ask_event". All fields are combined with a logical 'AND'.
"""
input MarketAskEvent_bool_exp {
  _and: [MarketAskEvent_bool_exp!]
  _not: MarketAskEvent_bool_exp
  _or: [MarketAskEvent_bool_exp!]
  address: String_comparison_exp
  amount: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  currency: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  status: ask_event_status_enum_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type MarketAskEvent_max_fields {
  address: String
  amount: String
  blockNumber: Int
  blockTimestamp: timestamp
  currency: String
  eventLogId: String
  id: String
  logIndex: Int
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "ask_event"
"""
input MarketAskEvent_max_order_by {
  address: order_by
  amount: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  currency: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type MarketAskEvent_min_fields {
  address: String
  amount: String
  blockNumber: Int
  blockTimestamp: timestamp
  currency: String
  eventLogId: String
  id: String
  logIndex: Int
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "ask_event"
"""
input MarketAskEvent_min_order_by {
  address: order_by
  amount: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  currency: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "ask_event"."""
input MarketAskEvent_order_by {
  address: order_by
  amount: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  currency: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  status: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "ask_event"
"""
enum MarketAskEvent_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  currency

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  status

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type MarketAskEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "ask_event"
"""
input MarketAskEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type MarketAskEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "ask_event"
"""
input MarketAskEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type MarketAskEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "ask_event"
"""
input MarketAskEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type MarketAskEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "ask_event"
"""
input MarketAskEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type MarketAskEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "ask_event"
"""
input MarketAskEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type MarketAskEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "ask_event"
"""
input MarketAskEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type MarketAskEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "ask_event"
"""
input MarketAskEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "bid"
"""
type MarketBid {
  amount: String!

  """An array relationship"""
  bidEvents(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): [MarketBidEvent!]!

  """An aggregate relationship"""
  bidEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): MarketBidEvent_aggregate!
  bidder: String!

  """An object relationship"""
  currency: Currency
  currencyAddress: String!
  id: String!

  """An object relationship"""
  media: Media
  recipient: String!
  sellOnShare: String!
  tokenId: String!
}

"""
aggregated selection of "bid"
"""
type MarketBid_aggregate {
  aggregate: MarketBid_aggregate_fields
  nodes: [MarketBid!]!
}

"""
aggregate fields of "bid"
"""
type MarketBid_aggregate_fields {
  count(columns: [MarketBid_select_column!], distinct: Boolean): Int!
  max: MarketBid_max_fields
  min: MarketBid_min_fields
}

"""
order by aggregate values of table "bid"
"""
input MarketBid_aggregate_order_by {
  count: order_by
  max: MarketBid_max_order_by
  min: MarketBid_min_order_by
}

"""
Boolean expression to filter rows from the table "bid". All fields are combined with a logical 'AND'.
"""
input MarketBid_bool_exp {
  _and: [MarketBid_bool_exp!]
  _not: MarketBid_bool_exp
  _or: [MarketBid_bool_exp!]
  amount: String_comparison_exp
  bidEvents: MarketBidEvent_bool_exp
  bidder: String_comparison_exp
  currency: Currency_bool_exp
  currencyAddress: String_comparison_exp
  id: String_comparison_exp
  media: Media_bool_exp
  recipient: String_comparison_exp
  sellOnShare: String_comparison_exp
  tokenId: String_comparison_exp
}

"""aggregate max on columns"""
type MarketBid_max_fields {
  amount: String
  bidder: String
  currencyAddress: String
  id: String
  recipient: String
  sellOnShare: String
  tokenId: String
}

"""
order by max() on columns of table "bid"
"""
input MarketBid_max_order_by {
  amount: order_by
  bidder: order_by
  currencyAddress: order_by
  id: order_by
  recipient: order_by
  sellOnShare: order_by
  tokenId: order_by
}

"""aggregate min on columns"""
type MarketBid_min_fields {
  amount: String
  bidder: String
  currencyAddress: String
  id: String
  recipient: String
  sellOnShare: String
  tokenId: String
}

"""
order by min() on columns of table "bid"
"""
input MarketBid_min_order_by {
  amount: order_by
  bidder: order_by
  currencyAddress: order_by
  id: order_by
  recipient: order_by
  sellOnShare: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "bid"."""
input MarketBid_order_by {
  amount: order_by
  bidEvents_aggregate: MarketBidEvent_aggregate_order_by
  bidder: order_by
  currency: Currency_order_by
  currencyAddress: order_by
  id: order_by
  media: Media_order_by
  recipient: order_by
  sellOnShare: order_by
  tokenId: order_by
}

"""
select columns of table "bid"
"""
enum MarketBid_select_column {
  """column name"""
  amount

  """column name"""
  bidder

  """column name"""
  currencyAddress

  """column name"""
  id

  """column name"""
  recipient

  """column name"""
  sellOnShare

  """column name"""
  tokenId
}

"""
columns and relationships of "bid_event"
"""
type MarketBidEvent {
  address: String!
  amount: String!
  bidder: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  currency: Currency
  currencyAddress: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  recipient: String!
  sellOnShare: String!
  status: bid_event_status_enum!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "bid_event"
"""
type MarketBidEvent_aggregate {
  aggregate: MarketBidEvent_aggregate_fields
  nodes: [MarketBidEvent!]!
}

"""
aggregate fields of "bid_event"
"""
type MarketBidEvent_aggregate_fields {
  avg: MarketBidEvent_avg_fields
  count(columns: [MarketBidEvent_select_column!], distinct: Boolean): Int!
  max: MarketBidEvent_max_fields
  min: MarketBidEvent_min_fields
  stddev: MarketBidEvent_stddev_fields
  stddev_pop: MarketBidEvent_stddev_pop_fields
  stddev_samp: MarketBidEvent_stddev_samp_fields
  sum: MarketBidEvent_sum_fields
  var_pop: MarketBidEvent_var_pop_fields
  var_samp: MarketBidEvent_var_samp_fields
  variance: MarketBidEvent_variance_fields
}

"""
order by aggregate values of table "bid_event"
"""
input MarketBidEvent_aggregate_order_by {
  avg: MarketBidEvent_avg_order_by
  count: order_by
  max: MarketBidEvent_max_order_by
  min: MarketBidEvent_min_order_by
  stddev: MarketBidEvent_stddev_order_by
  stddev_pop: MarketBidEvent_stddev_pop_order_by
  stddev_samp: MarketBidEvent_stddev_samp_order_by
  sum: MarketBidEvent_sum_order_by
  var_pop: MarketBidEvent_var_pop_order_by
  var_samp: MarketBidEvent_var_samp_order_by
  variance: MarketBidEvent_variance_order_by
}

"""aggregate avg on columns"""
type MarketBidEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "bid_event"
"""
input MarketBidEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "bid_event". All fields are combined with a logical 'AND'.
"""
input MarketBidEvent_bool_exp {
  _and: [MarketBidEvent_bool_exp!]
  _not: MarketBidEvent_bool_exp
  _or: [MarketBidEvent_bool_exp!]
  address: String_comparison_exp
  amount: String_comparison_exp
  bidder: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  currency: Currency_bool_exp
  currencyAddress: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  recipient: String_comparison_exp
  sellOnShare: String_comparison_exp
  status: bid_event_status_enum_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type MarketBidEvent_max_fields {
  address: String
  amount: String
  bidder: String
  blockNumber: Int
  blockTimestamp: timestamp
  currencyAddress: String
  eventLogId: String
  id: String
  logIndex: Int
  recipient: String
  sellOnShare: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "bid_event"
"""
input MarketBidEvent_max_order_by {
  address: order_by
  amount: order_by
  bidder: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  currencyAddress: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  recipient: order_by
  sellOnShare: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type MarketBidEvent_min_fields {
  address: String
  amount: String
  bidder: String
  blockNumber: Int
  blockTimestamp: timestamp
  currencyAddress: String
  eventLogId: String
  id: String
  logIndex: Int
  recipient: String
  sellOnShare: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "bid_event"
"""
input MarketBidEvent_min_order_by {
  address: order_by
  amount: order_by
  bidder: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  currencyAddress: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  recipient: order_by
  sellOnShare: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "bid_event"."""
input MarketBidEvent_order_by {
  address: order_by
  amount: order_by
  bidder: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  currency: Currency_order_by
  currencyAddress: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  recipient: order_by
  sellOnShare: order_by
  status: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "bid_event"
"""
enum MarketBidEvent_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  bidder

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  currencyAddress

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  recipient

  """column name"""
  sellOnShare

  """column name"""
  status

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type MarketBidEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "bid_event"
"""
input MarketBidEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type MarketBidEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "bid_event"
"""
input MarketBidEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type MarketBidEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "bid_event"
"""
input MarketBidEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type MarketBidEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "bid_event"
"""
input MarketBidEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type MarketBidEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "bid_event"
"""
input MarketBidEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type MarketBidEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "bid_event"
"""
input MarketBidEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type MarketBidEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "bid_event"
"""
input MarketBidEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "bid_share"
"""
type MarketBidShare {
  creator: String

  """An object relationship"""
  media: Media
  owner: String
  prevOwner: String
  tokenId: String
}

"""
aggregated selection of "bid_share"
"""
type MarketBidShare_aggregate {
  aggregate: MarketBidShare_aggregate_fields
  nodes: [MarketBidShare!]!
}

"""
aggregate fields of "bid_share"
"""
type MarketBidShare_aggregate_fields {
  count(columns: [MarketBidShare_select_column!], distinct: Boolean): Int!
  max: MarketBidShare_max_fields
  min: MarketBidShare_min_fields
}

"""
Boolean expression to filter rows from the table "bid_share". All fields are combined with a logical 'AND'.
"""
input MarketBidShare_bool_exp {
  _and: [MarketBidShare_bool_exp!]
  _not: MarketBidShare_bool_exp
  _or: [MarketBidShare_bool_exp!]
  creator: String_comparison_exp
  media: Media_bool_exp
  owner: String_comparison_exp
  prevOwner: String_comparison_exp
  tokenId: String_comparison_exp
}

"""aggregate max on columns"""
type MarketBidShare_max_fields {
  creator: String
  owner: String
  prevOwner: String
  tokenId: String
}

"""aggregate min on columns"""
type MarketBidShare_min_fields {
  creator: String
  owner: String
  prevOwner: String
  tokenId: String
}

"""Ordering options when selecting data from "bid_share"."""
input MarketBidShare_order_by {
  creator: order_by
  media: Media_order_by
  owner: order_by
  prevOwner: order_by
  tokenId: order_by
}

"""
select columns of table "bid_share"
"""
enum MarketBidShare_select_column {
  """column name"""
  creator

  """column name"""
  owner

  """column name"""
  prevOwner

  """column name"""
  tokenId
}

"""
columns and relationships of "bid_share_event"
"""
type MarketBidShareEvent {
  address: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  creator: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  owner: String!
  prevOwner: String!
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "bid_share_event"
"""
type MarketBidShareEvent_aggregate {
  aggregate: MarketBidShareEvent_aggregate_fields
  nodes: [MarketBidShareEvent!]!
}

"""
aggregate fields of "bid_share_event"
"""
type MarketBidShareEvent_aggregate_fields {
  avg: MarketBidShareEvent_avg_fields
  count(columns: [MarketBidShareEvent_select_column!], distinct: Boolean): Int!
  max: MarketBidShareEvent_max_fields
  min: MarketBidShareEvent_min_fields
  stddev: MarketBidShareEvent_stddev_fields
  stddev_pop: MarketBidShareEvent_stddev_pop_fields
  stddev_samp: MarketBidShareEvent_stddev_samp_fields
  sum: MarketBidShareEvent_sum_fields
  var_pop: MarketBidShareEvent_var_pop_fields
  var_samp: MarketBidShareEvent_var_samp_fields
  variance: MarketBidShareEvent_variance_fields
}

"""
order by aggregate values of table "bid_share_event"
"""
input MarketBidShareEvent_aggregate_order_by {
  avg: MarketBidShareEvent_avg_order_by
  count: order_by
  max: MarketBidShareEvent_max_order_by
  min: MarketBidShareEvent_min_order_by
  stddev: MarketBidShareEvent_stddev_order_by
  stddev_pop: MarketBidShareEvent_stddev_pop_order_by
  stddev_samp: MarketBidShareEvent_stddev_samp_order_by
  sum: MarketBidShareEvent_sum_order_by
  var_pop: MarketBidShareEvent_var_pop_order_by
  var_samp: MarketBidShareEvent_var_samp_order_by
  variance: MarketBidShareEvent_variance_order_by
}

"""aggregate avg on columns"""
type MarketBidShareEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "bid_share_event". All fields are combined with a logical 'AND'.
"""
input MarketBidShareEvent_bool_exp {
  _and: [MarketBidShareEvent_bool_exp!]
  _not: MarketBidShareEvent_bool_exp
  _or: [MarketBidShareEvent_bool_exp!]
  address: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  creator: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  owner: String_comparison_exp
  prevOwner: String_comparison_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type MarketBidShareEvent_max_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  creator: String
  eventLogId: String
  id: String
  logIndex: Int
  owner: String
  prevOwner: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_max_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  creator: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  owner: order_by
  prevOwner: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type MarketBidShareEvent_min_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  creator: String
  eventLogId: String
  id: String
  logIndex: Int
  owner: String
  prevOwner: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_min_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  creator: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  owner: order_by
  prevOwner: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "bid_share_event"."""
input MarketBidShareEvent_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  creator: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  owner: order_by
  prevOwner: order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "bid_share_event"
"""
enum MarketBidShareEvent_select_column {
  """column name"""
  address

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  creator

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  owner

  """column name"""
  prevOwner

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type MarketBidShareEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type MarketBidShareEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type MarketBidShareEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type MarketBidShareEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type MarketBidShareEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type MarketBidShareEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type MarketBidShareEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "bid_share_event"
"""
input MarketBidShareEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "media"
"""
type Media {
  address: String!

  """An array relationship"""
  askEvents(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): [MarketAskEvent!]!

  """An aggregate relationship"""
  askEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): MarketAskEvent_aggregate!

  """An array relationship"""
  asks(
    """distinct select on columns"""
    distinct_on: [MarketAsk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAsk_order_by!]

    """filter the rows returned"""
    where: MarketAsk_bool_exp
  ): [MarketAsk!]!

  """An aggregate relationship"""
  asks_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAsk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAsk_order_by!]

    """filter the rows returned"""
    where: MarketAsk_bool_exp
  ): MarketAsk_aggregate!

  """An array relationship"""
  auctions(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): [Auction!]!

  """An aggregate relationship"""
  auctions_aggregate(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): Auction_aggregate!

  """An array relationship"""
  bidEvents(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): [MarketBidEvent!]!

  """An aggregate relationship"""
  bidEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): MarketBidEvent_aggregate!

  """An array relationship"""
  bids(
    """distinct select on columns"""
    distinct_on: [MarketBid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBid_order_by!]

    """filter the rows returned"""
    where: MarketBid_bool_exp
  ): [MarketBid!]!

  """An aggregate relationship"""
  bids_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBid_order_by!]

    """filter the rows returned"""
    where: MarketBid_bool_exp
  ): MarketBid_aggregate!
  contentHash: String
  contentURI: String
  creator: String
  creatorBidShare: String

  """An object relationship"""
  metadata: MediaMetadata
  metadataHash: String
  metadataURI: String
  mintTransferEventId: String
  owner: String
  ownerBidShare: String
  prevOwner: String
  prevOwnerBidShare: String

  """An object relationship"""
  token: Token
  tokenId: String!

  """An array relationship"""
  tokenMetadataURIUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): [MediaTokenMetadataURIUpdatedEvent!]!

  """An aggregate relationship"""
  tokenMetadataURIUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): MediaTokenMetadataURIUpdatedEvent_aggregate!

  """An array relationship"""
  tokenURIUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): [MediaTokenURIUpdatedEvent!]!

  """An aggregate relationship"""
  tokenURIUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): MediaTokenURIUpdatedEvent_aggregate!

  """An array relationship"""
  transferEvents(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): [TokenTransferEvent!]!

  """An aggregate relationship"""
  transferEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): TokenTransferEvent_aggregate!
}

"""
aggregated selection of "media"
"""
type Media_aggregate {
  aggregate: Media_aggregate_fields
  nodes: [Media!]!
}

"""
aggregate fields of "media"
"""
type Media_aggregate_fields {
  count(columns: [Media_select_column!], distinct: Boolean): Int!
  max: Media_max_fields
  min: Media_min_fields
}

"""
Boolean expression to filter rows from the table "media". All fields are combined with a logical 'AND'.
"""
input Media_bool_exp {
  _and: [Media_bool_exp!]
  _not: Media_bool_exp
  _or: [Media_bool_exp!]
  address: String_comparison_exp
  askEvents: MarketAskEvent_bool_exp
  asks: MarketAsk_bool_exp
  auctions: Auction_bool_exp
  bidEvents: MarketBidEvent_bool_exp
  bids: MarketBid_bool_exp
  contentHash: String_comparison_exp
  contentURI: String_comparison_exp
  creator: String_comparison_exp
  creatorBidShare: String_comparison_exp
  metadata: MediaMetadata_bool_exp
  metadataHash: String_comparison_exp
  metadataURI: String_comparison_exp
  mintTransferEventId: String_comparison_exp
  owner: String_comparison_exp
  ownerBidShare: String_comparison_exp
  prevOwner: String_comparison_exp
  prevOwnerBidShare: String_comparison_exp
  token: Token_bool_exp
  tokenId: String_comparison_exp
  tokenMetadataURIUpdatedEvents: MediaTokenMetadataURIUpdatedEvent_bool_exp
  tokenURIUpdatedEvents: MediaTokenURIUpdatedEvent_bool_exp
  transferEvents: TokenTransferEvent_bool_exp
}

"""aggregate max on columns"""
type Media_max_fields {
  address: String
  contentHash: String
  contentURI: String
  creator: String
  creatorBidShare: String
  metadataHash: String
  metadataURI: String
  mintTransferEventId: String
  owner: String
  ownerBidShare: String
  prevOwner: String
  prevOwnerBidShare: String
  tokenId: String
}

"""aggregate min on columns"""
type Media_min_fields {
  address: String
  contentHash: String
  contentURI: String
  creator: String
  creatorBidShare: String
  metadataHash: String
  metadataURI: String
  mintTransferEventId: String
  owner: String
  ownerBidShare: String
  prevOwner: String
  prevOwnerBidShare: String
  tokenId: String
}

"""Ordering options when selecting data from "media"."""
input Media_order_by {
  address: order_by
  askEvents_aggregate: MarketAskEvent_aggregate_order_by
  asks_aggregate: MarketAsk_aggregate_order_by
  auctions_aggregate: Auction_aggregate_order_by
  bidEvents_aggregate: MarketBidEvent_aggregate_order_by
  bids_aggregate: MarketBid_aggregate_order_by
  contentHash: order_by
  contentURI: order_by
  creator: order_by
  creatorBidShare: order_by
  metadata: MediaMetadata_order_by
  metadataHash: order_by
  metadataURI: order_by
  mintTransferEventId: order_by
  owner: order_by
  ownerBidShare: order_by
  prevOwner: order_by
  prevOwnerBidShare: order_by
  token: Token_order_by
  tokenId: order_by
  tokenMetadataURIUpdatedEvents_aggregate: MediaTokenMetadataURIUpdatedEvent_aggregate_order_by
  tokenURIUpdatedEvents_aggregate: MediaTokenURIUpdatedEvent_aggregate_order_by
  transferEvents_aggregate: TokenTransferEvent_aggregate_order_by
}

"""
select columns of table "media"
"""
enum Media_select_column {
  """column name"""
  address

  """column name"""
  contentHash

  """column name"""
  contentURI

  """column name"""
  creator

  """column name"""
  creatorBidShare

  """column name"""
  metadataHash

  """column name"""
  metadataURI

  """column name"""
  mintTransferEventId

  """column name"""
  owner

  """column name"""
  ownerBidShare

  """column name"""
  prevOwner

  """column name"""
  prevOwnerBidShare

  """column name"""
  tokenId
}

"""
columns and relationships of "metadata"
"""
type MediaMetadata {
  blockNumber: Int!
  createdAt: timestamp!
  id: String!
  json(
    """JSON select path"""
    path: String
  ): jsonb
  logIndex: Int!

  """An object relationship"""
  media: Media
  tokenId: String!
  updatedAt: timestamp!
  uri: String!
}

"""
aggregated selection of "metadata"
"""
type MediaMetadata_aggregate {
  aggregate: MediaMetadata_aggregate_fields
  nodes: [MediaMetadata!]!
}

"""
aggregate fields of "metadata"
"""
type MediaMetadata_aggregate_fields {
  avg: MediaMetadata_avg_fields
  count(columns: [MediaMetadata_select_column!], distinct: Boolean): Int!
  max: MediaMetadata_max_fields
  min: MediaMetadata_min_fields
  stddev: MediaMetadata_stddev_fields
  stddev_pop: MediaMetadata_stddev_pop_fields
  stddev_samp: MediaMetadata_stddev_samp_fields
  sum: MediaMetadata_sum_fields
  var_pop: MediaMetadata_var_pop_fields
  var_samp: MediaMetadata_var_samp_fields
  variance: MediaMetadata_variance_fields
}

"""aggregate avg on columns"""
type MediaMetadata_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
Boolean expression to filter rows from the table "metadata". All fields are combined with a logical 'AND'.
"""
input MediaMetadata_bool_exp {
  _and: [MediaMetadata_bool_exp!]
  _not: MediaMetadata_bool_exp
  _or: [MediaMetadata_bool_exp!]
  blockNumber: Int_comparison_exp
  createdAt: timestamp_comparison_exp
  id: String_comparison_exp
  json: jsonb_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  tokenId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  uri: String_comparison_exp
}

"""aggregate max on columns"""
type MediaMetadata_max_fields {
  blockNumber: Int
  createdAt: timestamp
  id: String
  logIndex: Int
  tokenId: String
  updatedAt: timestamp
  uri: String
}

"""aggregate min on columns"""
type MediaMetadata_min_fields {
  blockNumber: Int
  createdAt: timestamp
  id: String
  logIndex: Int
  tokenId: String
  updatedAt: timestamp
  uri: String
}

"""Ordering options when selecting data from "metadata"."""
input MediaMetadata_order_by {
  blockNumber: order_by
  createdAt: order_by
  id: order_by
  json: order_by
  logIndex: order_by
  media: Media_order_by
  tokenId: order_by
  updatedAt: order_by
  uri: order_by
}

"""
select columns of table "metadata"
"""
enum MediaMetadata_select_column {
  """column name"""
  blockNumber

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  json

  """column name"""
  logIndex

  """column name"""
  tokenId

  """column name"""
  updatedAt

  """column name"""
  uri
}

"""aggregate stddev on columns"""
type MediaMetadata_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""aggregate stddev_pop on columns"""
type MediaMetadata_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""aggregate stddev_samp on columns"""
type MediaMetadata_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""aggregate sum on columns"""
type MediaMetadata_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""aggregate var_pop on columns"""
type MediaMetadata_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""aggregate var_samp on columns"""
type MediaMetadata_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""aggregate variance on columns"""
type MediaMetadata_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
columns and relationships of "mint_event"
"""
type MediaMint {
  address: String!
  blockNumber: Int!
  blockTimestamp: timestamp!
  contentHash: String!
  contentURI: String!
  creator: String!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  metadataHash: String!
  metadataURI: String!

  """An object relationship"""
  token: Token
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "mint_event"
"""
type MediaMint_aggregate {
  aggregate: MediaMint_aggregate_fields
  nodes: [MediaMint!]!
}

"""
aggregate fields of "mint_event"
"""
type MediaMint_aggregate_fields {
  avg: MediaMint_avg_fields
  count(columns: [MediaMint_select_column!], distinct: Boolean): Int!
  max: MediaMint_max_fields
  min: MediaMint_min_fields
  stddev: MediaMint_stddev_fields
  stddev_pop: MediaMint_stddev_pop_fields
  stddev_samp: MediaMint_stddev_samp_fields
  sum: MediaMint_sum_fields
  var_pop: MediaMint_var_pop_fields
  var_samp: MediaMint_var_samp_fields
  variance: MediaMint_variance_fields
}

"""
order by aggregate values of table "mint_event"
"""
input MediaMint_aggregate_order_by {
  avg: MediaMint_avg_order_by
  count: order_by
  max: MediaMint_max_order_by
  min: MediaMint_min_order_by
  stddev: MediaMint_stddev_order_by
  stddev_pop: MediaMint_stddev_pop_order_by
  stddev_samp: MediaMint_stddev_samp_order_by
  sum: MediaMint_sum_order_by
  var_pop: MediaMint_var_pop_order_by
  var_samp: MediaMint_var_samp_order_by
  variance: MediaMint_variance_order_by
}

"""aggregate avg on columns"""
type MediaMint_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "mint_event"
"""
input MediaMint_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "mint_event". All fields are combined with a logical 'AND'.
"""
input MediaMint_bool_exp {
  _and: [MediaMint_bool_exp!]
  _not: MediaMint_bool_exp
  _or: [MediaMint_bool_exp!]
  address: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  contentHash: String_comparison_exp
  contentURI: String_comparison_exp
  creator: String_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  metadataHash: String_comparison_exp
  metadataURI: String_comparison_exp
  token: Token_bool_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type MediaMint_max_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  contentHash: String
  contentURI: String
  creator: String
  eventLogId: String
  id: String
  logIndex: Int
  metadataHash: String
  metadataURI: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "mint_event"
"""
input MediaMint_max_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  contentHash: order_by
  contentURI: order_by
  creator: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  metadataHash: order_by
  metadataURI: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type MediaMint_min_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  contentHash: String
  contentURI: String
  creator: String
  eventLogId: String
  id: String
  logIndex: Int
  metadataHash: String
  metadataURI: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "mint_event"
"""
input MediaMint_min_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  contentHash: order_by
  contentURI: order_by
  creator: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  metadataHash: order_by
  metadataURI: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "mint_event"."""
input MediaMint_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  contentHash: order_by
  contentURI: order_by
  creator: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  metadataHash: order_by
  metadataURI: order_by
  token: Token_order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "mint_event"
"""
enum MediaMint_select_column {
  """column name"""
  address

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  contentHash

  """column name"""
  contentURI

  """column name"""
  creator

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  metadataHash

  """column name"""
  metadataURI

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type MediaMint_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "mint_event"
"""
input MediaMint_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type MediaMint_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "mint_event"
"""
input MediaMint_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type MediaMint_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "mint_event"
"""
input MediaMint_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type MediaMint_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "mint_event"
"""
input MediaMint_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type MediaMint_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "mint_event"
"""
input MediaMint_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type MediaMint_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "mint_event"
"""
input MediaMint_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type MediaMint_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "mint_event"
"""
input MediaMint_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "metadata_uri_updated_event"
"""
type MediaTokenMetadataURIUpdatedEvent {
  address: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  owner: String!

  """An object relationship"""
  token: Token
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
  uri: String!
}

"""
aggregated selection of "metadata_uri_updated_event"
"""
type MediaTokenMetadataURIUpdatedEvent_aggregate {
  aggregate: MediaTokenMetadataURIUpdatedEvent_aggregate_fields
  nodes: [MediaTokenMetadataURIUpdatedEvent!]!
}

"""
aggregate fields of "metadata_uri_updated_event"
"""
type MediaTokenMetadataURIUpdatedEvent_aggregate_fields {
  avg: MediaTokenMetadataURIUpdatedEvent_avg_fields
  count(columns: [MediaTokenMetadataURIUpdatedEvent_select_column!], distinct: Boolean): Int!
  max: MediaTokenMetadataURIUpdatedEvent_max_fields
  min: MediaTokenMetadataURIUpdatedEvent_min_fields
  stddev: MediaTokenMetadataURIUpdatedEvent_stddev_fields
  stddev_pop: MediaTokenMetadataURIUpdatedEvent_stddev_pop_fields
  stddev_samp: MediaTokenMetadataURIUpdatedEvent_stddev_samp_fields
  sum: MediaTokenMetadataURIUpdatedEvent_sum_fields
  var_pop: MediaTokenMetadataURIUpdatedEvent_var_pop_fields
  var_samp: MediaTokenMetadataURIUpdatedEvent_var_samp_fields
  variance: MediaTokenMetadataURIUpdatedEvent_variance_fields
}

"""
order by aggregate values of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_aggregate_order_by {
  avg: MediaTokenMetadataURIUpdatedEvent_avg_order_by
  count: order_by
  max: MediaTokenMetadataURIUpdatedEvent_max_order_by
  min: MediaTokenMetadataURIUpdatedEvent_min_order_by
  stddev: MediaTokenMetadataURIUpdatedEvent_stddev_order_by
  stddev_pop: MediaTokenMetadataURIUpdatedEvent_stddev_pop_order_by
  stddev_samp: MediaTokenMetadataURIUpdatedEvent_stddev_samp_order_by
  sum: MediaTokenMetadataURIUpdatedEvent_sum_order_by
  var_pop: MediaTokenMetadataURIUpdatedEvent_var_pop_order_by
  var_samp: MediaTokenMetadataURIUpdatedEvent_var_samp_order_by
  variance: MediaTokenMetadataURIUpdatedEvent_variance_order_by
}

"""aggregate avg on columns"""
type MediaTokenMetadataURIUpdatedEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "metadata_uri_updated_event". All fields are combined with a logical 'AND'.
"""
input MediaTokenMetadataURIUpdatedEvent_bool_exp {
  _and: [MediaTokenMetadataURIUpdatedEvent_bool_exp!]
  _not: MediaTokenMetadataURIUpdatedEvent_bool_exp
  _or: [MediaTokenMetadataURIUpdatedEvent_bool_exp!]
  address: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  owner: String_comparison_exp
  token: Token_bool_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
  uri: String_comparison_exp
}

"""aggregate max on columns"""
type MediaTokenMetadataURIUpdatedEvent_max_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  owner: String
  tokenId: String
  transactionHash: String
  uri: String
}

"""
order by max() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_max_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  owner: order_by
  tokenId: order_by
  transactionHash: order_by
  uri: order_by
}

"""aggregate min on columns"""
type MediaTokenMetadataURIUpdatedEvent_min_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  owner: String
  tokenId: String
  transactionHash: String
  uri: String
}

"""
order by min() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_min_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  owner: order_by
  tokenId: order_by
  transactionHash: order_by
  uri: order_by
}

"""
Ordering options when selecting data from "metadata_uri_updated_event".
"""
input MediaTokenMetadataURIUpdatedEvent_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  owner: order_by
  token: Token_order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
  uri: order_by
}

"""
select columns of table "metadata_uri_updated_event"
"""
enum MediaTokenMetadataURIUpdatedEvent_select_column {
  """column name"""
  address

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  owner

  """column name"""
  tokenId

  """column name"""
  transactionHash

  """column name"""
  uri
}

"""aggregate stddev on columns"""
type MediaTokenMetadataURIUpdatedEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type MediaTokenMetadataURIUpdatedEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type MediaTokenMetadataURIUpdatedEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type MediaTokenMetadataURIUpdatedEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type MediaTokenMetadataURIUpdatedEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type MediaTokenMetadataURIUpdatedEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type MediaTokenMetadataURIUpdatedEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "metadata_uri_updated_event"
"""
input MediaTokenMetadataURIUpdatedEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "media_uri_updated_event"
"""
type MediaTokenURIUpdatedEvent {
  address: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  eventLogId: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  owner: String!

  """An object relationship"""
  token: Token
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
  uri: String!
}

"""
aggregated selection of "media_uri_updated_event"
"""
type MediaTokenURIUpdatedEvent_aggregate {
  aggregate: MediaTokenURIUpdatedEvent_aggregate_fields
  nodes: [MediaTokenURIUpdatedEvent!]!
}

"""
aggregate fields of "media_uri_updated_event"
"""
type MediaTokenURIUpdatedEvent_aggregate_fields {
  avg: MediaTokenURIUpdatedEvent_avg_fields
  count(columns: [MediaTokenURIUpdatedEvent_select_column!], distinct: Boolean): Int!
  max: MediaTokenURIUpdatedEvent_max_fields
  min: MediaTokenURIUpdatedEvent_min_fields
  stddev: MediaTokenURIUpdatedEvent_stddev_fields
  stddev_pop: MediaTokenURIUpdatedEvent_stddev_pop_fields
  stddev_samp: MediaTokenURIUpdatedEvent_stddev_samp_fields
  sum: MediaTokenURIUpdatedEvent_sum_fields
  var_pop: MediaTokenURIUpdatedEvent_var_pop_fields
  var_samp: MediaTokenURIUpdatedEvent_var_samp_fields
  variance: MediaTokenURIUpdatedEvent_variance_fields
}

"""
order by aggregate values of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_aggregate_order_by {
  avg: MediaTokenURIUpdatedEvent_avg_order_by
  count: order_by
  max: MediaTokenURIUpdatedEvent_max_order_by
  min: MediaTokenURIUpdatedEvent_min_order_by
  stddev: MediaTokenURIUpdatedEvent_stddev_order_by
  stddev_pop: MediaTokenURIUpdatedEvent_stddev_pop_order_by
  stddev_samp: MediaTokenURIUpdatedEvent_stddev_samp_order_by
  sum: MediaTokenURIUpdatedEvent_sum_order_by
  var_pop: MediaTokenURIUpdatedEvent_var_pop_order_by
  var_samp: MediaTokenURIUpdatedEvent_var_samp_order_by
  variance: MediaTokenURIUpdatedEvent_variance_order_by
}

"""aggregate avg on columns"""
type MediaTokenURIUpdatedEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "media_uri_updated_event". All fields are combined with a logical 'AND'.
"""
input MediaTokenURIUpdatedEvent_bool_exp {
  _and: [MediaTokenURIUpdatedEvent_bool_exp!]
  _not: MediaTokenURIUpdatedEvent_bool_exp
  _or: [MediaTokenURIUpdatedEvent_bool_exp!]
  address: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  eventLogId: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  owner: String_comparison_exp
  token: Token_bool_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
  uri: String_comparison_exp
}

"""aggregate max on columns"""
type MediaTokenURIUpdatedEvent_max_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  owner: String
  tokenId: String
  transactionHash: String
  uri: String
}

"""
order by max() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_max_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  owner: order_by
  tokenId: order_by
  transactionHash: order_by
  uri: order_by
}

"""aggregate min on columns"""
type MediaTokenURIUpdatedEvent_min_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  eventLogId: String
  id: String
  logIndex: Int
  owner: String
  tokenId: String
  transactionHash: String
  uri: String
}

"""
order by min() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_min_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  owner: order_by
  tokenId: order_by
  transactionHash: order_by
  uri: order_by
}

"""Ordering options when selecting data from "media_uri_updated_event"."""
input MediaTokenURIUpdatedEvent_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  eventLogId: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  owner: order_by
  token: Token_order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
  uri: order_by
}

"""
select columns of table "media_uri_updated_event"
"""
enum MediaTokenURIUpdatedEvent_select_column {
  """column name"""
  address

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  eventLogId

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  owner

  """column name"""
  tokenId

  """column name"""
  transactionHash

  """column name"""
  uri
}

"""aggregate stddev on columns"""
type MediaTokenURIUpdatedEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type MediaTokenURIUpdatedEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type MediaTokenURIUpdatedEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type MediaTokenURIUpdatedEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type MediaTokenURIUpdatedEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type MediaTokenURIUpdatedEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type MediaTokenURIUpdatedEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "media_uri_updated_event"
"""
input MediaTokenURIUpdatedEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

scalar nft_contract_status_enum

"""
Boolean expression to compare columns of type "nft_contract_status_enum". All fields are combined with logical 'AND'.
"""
input nft_contract_status_enum_comparison_exp {
  _eq: nft_contract_status_enum
  _gt: nft_contract_status_enum
  _gte: nft_contract_status_enum
  _in: [nft_contract_status_enum!]
  _is_null: Boolean
  _lt: nft_contract_status_enum
  _lte: nft_contract_status_enum
  _neq: nft_contract_status_enum
  _nin: [nft_contract_status_enum!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "auction"
  """
  Auction(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): [Auction!]!

  """
  fetch data from the table: "auction_approval_updated_event"
  """
  AuctionApprovalUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): [AuctionApprovalUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "auction_approval_updated_event"
  """
  AuctionApprovalUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): AuctionApprovalUpdatedEvent_aggregate!

  """
  fetch data from the table: "auction_approval_updated_event" using primary key columns
  """
  AuctionApprovalUpdatedEvent_by_pk(id: String!): AuctionApprovalUpdatedEvent

  """
  fetch data from the table: "auction_bid_event"
  """
  AuctionBidEvent(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): [AuctionBidEvent!]!

  """
  fetch aggregated fields from the table: "auction_bid_event"
  """
  AuctionBidEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): AuctionBidEvent_aggregate!

  """
  fetch data from the table: "auction_bid_event" using primary key columns
  """
  AuctionBidEvent_by_pk(id: String!): AuctionBidEvent

  """
  fetch data from the table: "auction_canceled_event"
  """
  AuctionCanceledEvent(
    """distinct select on columns"""
    distinct_on: [AuctionCanceledEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCanceledEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCanceledEvent_bool_exp
  ): [AuctionCanceledEvent!]!

  """
  fetch aggregated fields from the table: "auction_canceled_event"
  """
  AuctionCanceledEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionCanceledEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCanceledEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCanceledEvent_bool_exp
  ): AuctionCanceledEvent_aggregate!

  """
  fetch data from the table: "auction_canceled_event" using primary key columns
  """
  AuctionCanceledEvent_by_pk(id: String!): AuctionCanceledEvent

  """
  fetch data from the table: "auction_created_event"
  """
  AuctionCreatedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionCreatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCreatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCreatedEvent_bool_exp
  ): [AuctionCreatedEvent!]!

  """
  fetch aggregated fields from the table: "auction_created_event"
  """
  AuctionCreatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionCreatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCreatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCreatedEvent_bool_exp
  ): AuctionCreatedEvent_aggregate!

  """
  fetch data from the table: "auction_created_event" using primary key columns
  """
  AuctionCreatedEvent_by_pk(id: String!): AuctionCreatedEvent

  """
  fetch data from the table: "auction_duration_extended_event"
  """
  AuctionDurationExtendedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): [AuctionDurationExtendedEvent!]!

  """
  fetch aggregated fields from the table: "auction_duration_extended_event"
  """
  AuctionDurationExtendedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): AuctionDurationExtendedEvent_aggregate!

  """
  fetch data from the table: "auction_duration_extended_event" using primary key columns
  """
  AuctionDurationExtendedEvent_by_pk(id: String!): AuctionDurationExtendedEvent

  """
  fetch data from the table: "auction_ended_event"
  """
  AuctionEndedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionEndedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionEndedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionEndedEvent_bool_exp
  ): [AuctionEndedEvent!]!

  """
  fetch aggregated fields from the table: "auction_ended_event"
  """
  AuctionEndedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionEndedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionEndedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionEndedEvent_bool_exp
  ): AuctionEndedEvent_aggregate!

  """
  fetch data from the table: "auction_ended_event" using primary key columns
  """
  AuctionEndedEvent_by_pk(id: String!): AuctionEndedEvent

  """
  fetch data from the table: "auction_reserve_price_updated_event"
  """
  AuctionReservePriceUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): [AuctionReservePriceUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "auction_reserve_price_updated_event"
  """
  AuctionReservePriceUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): AuctionReservePriceUpdatedEvent_aggregate!

  """
  fetch data from the table: "auction_reserve_price_updated_event" using primary key columns
  """
  AuctionReservePriceUpdatedEvent_by_pk(id: String!): AuctionReservePriceUpdatedEvent

  """
  fetch aggregated fields from the table: "auction"
  """
  Auction_aggregate(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): Auction_aggregate!

  """fetch data from the table: "auction" using primary key columns"""
  Auction_by_pk(auctionId: String!): Auction

  """
  fetch data from the table: "currency"
  """
  Currency(
    """distinct select on columns"""
    distinct_on: [Currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Currency_order_by!]

    """filter the rows returned"""
    where: Currency_bool_exp
  ): [Currency!]!

  """
  fetch aggregated fields from the table: "currency"
  """
  Currency_aggregate(
    """distinct select on columns"""
    distinct_on: [Currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Currency_order_by!]

    """filter the rows returned"""
    where: Currency_bool_exp
  ): Currency_aggregate!

  """fetch data from the table: "currency" using primary key columns"""
  Currency_by_pk(address: String!): Currency

  """
  fetch data from the table: "raw_log"
  """
  EventLog(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """
  fetch aggregated fields from the table: "raw_log"
  """
  EventLog_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """fetch data from the table: "raw_log" using primary key columns"""
  EventLog_by_pk(id: String!): EventLog

  """
  fetch data from the table: "ask"
  """
  MarketAsk(
    """distinct select on columns"""
    distinct_on: [MarketAsk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAsk_order_by!]

    """filter the rows returned"""
    where: MarketAsk_bool_exp
  ): [MarketAsk!]!

  """
  fetch data from the table: "ask_event"
  """
  MarketAskEvent(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): [MarketAskEvent!]!

  """
  fetch aggregated fields from the table: "ask_event"
  """
  MarketAskEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): MarketAskEvent_aggregate!

  """fetch data from the table: "ask_event" using primary key columns"""
  MarketAskEvent_by_pk(id: String!): MarketAskEvent

  """
  fetch aggregated fields from the table: "ask"
  """
  MarketAsk_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAsk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAsk_order_by!]

    """filter the rows returned"""
    where: MarketAsk_bool_exp
  ): MarketAsk_aggregate!

  """
  fetch data from the table: "bid"
  """
  MarketBid(
    """distinct select on columns"""
    distinct_on: [MarketBid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBid_order_by!]

    """filter the rows returned"""
    where: MarketBid_bool_exp
  ): [MarketBid!]!

  """
  fetch data from the table: "bid_event"
  """
  MarketBidEvent(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): [MarketBidEvent!]!

  """
  fetch aggregated fields from the table: "bid_event"
  """
  MarketBidEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): MarketBidEvent_aggregate!

  """fetch data from the table: "bid_event" using primary key columns"""
  MarketBidEvent_by_pk(id: String!): MarketBidEvent

  """
  fetch data from the table: "bid_share"
  """
  MarketBidShare(
    """distinct select on columns"""
    distinct_on: [MarketBidShare_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShare_order_by!]

    """filter the rows returned"""
    where: MarketBidShare_bool_exp
  ): [MarketBidShare!]!

  """
  fetch data from the table: "bid_share_event"
  """
  MarketBidShareEvent(
    """distinct select on columns"""
    distinct_on: [MarketBidShareEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShareEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidShareEvent_bool_exp
  ): [MarketBidShareEvent!]!

  """
  fetch aggregated fields from the table: "bid_share_event"
  """
  MarketBidShareEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidShareEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShareEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidShareEvent_bool_exp
  ): MarketBidShareEvent_aggregate!

  """fetch data from the table: "bid_share_event" using primary key columns"""
  MarketBidShareEvent_by_pk(id: String!): MarketBidShareEvent

  """
  fetch aggregated fields from the table: "bid_share"
  """
  MarketBidShare_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidShare_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShare_order_by!]

    """filter the rows returned"""
    where: MarketBidShare_bool_exp
  ): MarketBidShare_aggregate!

  """
  fetch aggregated fields from the table: "bid"
  """
  MarketBid_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBid_order_by!]

    """filter the rows returned"""
    where: MarketBid_bool_exp
  ): MarketBid_aggregate!

  """fetch data from the table: "bid" using primary key columns"""
  MarketBid_by_pk(id: String!): MarketBid

  """
  fetch data from the table: "media"
  """
  Media(
    """distinct select on columns"""
    distinct_on: [Media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Media_order_by!]

    """filter the rows returned"""
    where: Media_bool_exp
  ): [Media!]!

  """
  fetch data from the table: "metadata"
  """
  MediaMetadata(
    """distinct select on columns"""
    distinct_on: [MediaMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMetadata_order_by!]

    """filter the rows returned"""
    where: MediaMetadata_bool_exp
  ): [MediaMetadata!]!

  """
  fetch aggregated fields from the table: "metadata"
  """
  MediaMetadata_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMetadata_order_by!]

    """filter the rows returned"""
    where: MediaMetadata_bool_exp
  ): MediaMetadata_aggregate!

  """fetch data from the table: "metadata" using primary key columns"""
  MediaMetadata_by_pk(id: String!): MediaMetadata

  """
  fetch data from the table: "mint_event"
  """
  MediaMint(
    """distinct select on columns"""
    distinct_on: [MediaMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMint_order_by!]

    """filter the rows returned"""
    where: MediaMint_bool_exp
  ): [MediaMint!]!

  """
  fetch aggregated fields from the table: "mint_event"
  """
  MediaMint_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMint_order_by!]

    """filter the rows returned"""
    where: MediaMint_bool_exp
  ): MediaMint_aggregate!

  """fetch data from the table: "mint_event" using primary key columns"""
  MediaMint_by_pk(id: String!): MediaMint

  """
  fetch data from the table: "metadata_uri_updated_event"
  """
  MediaTokenMetadataURIUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): [MediaTokenMetadataURIUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "metadata_uri_updated_event"
  """
  MediaTokenMetadataURIUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): MediaTokenMetadataURIUpdatedEvent_aggregate!

  """
  fetch data from the table: "metadata_uri_updated_event" using primary key columns
  """
  MediaTokenMetadataURIUpdatedEvent_by_pk(id: String!): MediaTokenMetadataURIUpdatedEvent

  """
  fetch data from the table: "media_uri_updated_event"
  """
  MediaTokenURIUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): [MediaTokenURIUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "media_uri_updated_event"
  """
  MediaTokenURIUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): MediaTokenURIUpdatedEvent_aggregate!

  """
  fetch data from the table: "media_uri_updated_event" using primary key columns
  """
  MediaTokenURIUpdatedEvent_by_pk(id: String!): MediaTokenURIUpdatedEvent

  """
  fetch aggregated fields from the table: "media"
  """
  Media_aggregate(
    """distinct select on columns"""
    distinct_on: [Media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Media_order_by!]

    """filter the rows returned"""
    where: Media_bool_exp
  ): Media_aggregate!

  """fetch data from the table: "media" using primary key columns"""
  Media_by_pk(tokenId: String!): Media

  """
  fetch data from the table: "token"
  """
  Token(
    """distinct select on columns"""
    distinct_on: [Token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Token_order_by!]

    """filter the rows returned"""
    where: Token_bool_exp
  ): [Token!]!

  """
  fetch data from the table: "nft_contract"
  """
  TokenContract(
    """distinct select on columns"""
    distinct_on: [TokenContract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenContract_order_by!]

    """filter the rows returned"""
    where: TokenContract_bool_exp
  ): [TokenContract!]!

  """
  fetch aggregated fields from the table: "nft_contract"
  """
  TokenContract_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenContract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenContract_order_by!]

    """filter the rows returned"""
    where: TokenContract_bool_exp
  ): TokenContract_aggregate!

  """fetch data from the table: "nft_contract" using primary key columns"""
  TokenContract_by_pk(address: String!): TokenContract

  """
  fetch data from the table: "nft_metadata"
  """
  TokenMetadata(
    """distinct select on columns"""
    distinct_on: [TokenMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMetadata_order_by!]

    """filter the rows returned"""
    where: TokenMetadata_bool_exp
  ): [TokenMetadata!]!

  """
  fetch aggregated fields from the table: "nft_metadata"
  """
  TokenMetadata_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMetadata_order_by!]

    """filter the rows returned"""
    where: TokenMetadata_bool_exp
  ): TokenMetadata_aggregate!

  """fetch data from the table: "nft_metadata" using primary key columns"""
  TokenMetadata_by_pk(id: uuid!): TokenMetadata

  """
  fetch data from the table: "nft_transfer_event"
  """
  TokenTransferEvent(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): [TokenTransferEvent!]!

  """
  fetch aggregated fields from the table: "nft_transfer_event"
  """
  TokenTransferEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): TokenTransferEvent_aggregate!

  """
  fetch data from the table: "nft_transfer_event" using primary key columns
  """
  TokenTransferEvent_by_pk(id: String!): TokenTransferEvent

  """
  fetch aggregated fields from the table: "token"
  """
  Token_aggregate(
    """distinct select on columns"""
    distinct_on: [Token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Token_order_by!]

    """filter the rows returned"""
    where: Token_bool_exp
  ): Token_aggregate!

  """fetch data from the table: "token" using primary key columns"""
  Token_by_pk(id: String!): Token

  """
  fetch data from the table: "transaction"
  """
  Transaction(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!

  """
  fetch aggregated fields from the table: "transaction"
  """
  Transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): Transaction_aggregate!

  """fetch data from the table: "transaction" using primary key columns"""
  Transaction_by_pk(hash: String!): Transaction
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "auction"
  """
  Auction(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): [Auction!]!

  """
  fetch data from the table: "auction_approval_updated_event"
  """
  AuctionApprovalUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): [AuctionApprovalUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "auction_approval_updated_event"
  """
  AuctionApprovalUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): AuctionApprovalUpdatedEvent_aggregate!

  """
  fetch data from the table: "auction_approval_updated_event" using primary key columns
  """
  AuctionApprovalUpdatedEvent_by_pk(id: String!): AuctionApprovalUpdatedEvent

  """
  fetch data from the table: "auction_bid_event"
  """
  AuctionBidEvent(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): [AuctionBidEvent!]!

  """
  fetch aggregated fields from the table: "auction_bid_event"
  """
  AuctionBidEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): AuctionBidEvent_aggregate!

  """
  fetch data from the table: "auction_bid_event" using primary key columns
  """
  AuctionBidEvent_by_pk(id: String!): AuctionBidEvent

  """
  fetch data from the table: "auction_canceled_event"
  """
  AuctionCanceledEvent(
    """distinct select on columns"""
    distinct_on: [AuctionCanceledEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCanceledEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCanceledEvent_bool_exp
  ): [AuctionCanceledEvent!]!

  """
  fetch aggregated fields from the table: "auction_canceled_event"
  """
  AuctionCanceledEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionCanceledEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCanceledEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCanceledEvent_bool_exp
  ): AuctionCanceledEvent_aggregate!

  """
  fetch data from the table: "auction_canceled_event" using primary key columns
  """
  AuctionCanceledEvent_by_pk(id: String!): AuctionCanceledEvent

  """
  fetch data from the table: "auction_created_event"
  """
  AuctionCreatedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionCreatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCreatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCreatedEvent_bool_exp
  ): [AuctionCreatedEvent!]!

  """
  fetch aggregated fields from the table: "auction_created_event"
  """
  AuctionCreatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionCreatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCreatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCreatedEvent_bool_exp
  ): AuctionCreatedEvent_aggregate!

  """
  fetch data from the table: "auction_created_event" using primary key columns
  """
  AuctionCreatedEvent_by_pk(id: String!): AuctionCreatedEvent

  """
  fetch data from the table: "auction_duration_extended_event"
  """
  AuctionDurationExtendedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): [AuctionDurationExtendedEvent!]!

  """
  fetch aggregated fields from the table: "auction_duration_extended_event"
  """
  AuctionDurationExtendedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): AuctionDurationExtendedEvent_aggregate!

  """
  fetch data from the table: "auction_duration_extended_event" using primary key columns
  """
  AuctionDurationExtendedEvent_by_pk(id: String!): AuctionDurationExtendedEvent

  """
  fetch data from the table: "auction_ended_event"
  """
  AuctionEndedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionEndedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionEndedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionEndedEvent_bool_exp
  ): [AuctionEndedEvent!]!

  """
  fetch aggregated fields from the table: "auction_ended_event"
  """
  AuctionEndedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionEndedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionEndedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionEndedEvent_bool_exp
  ): AuctionEndedEvent_aggregate!

  """
  fetch data from the table: "auction_ended_event" using primary key columns
  """
  AuctionEndedEvent_by_pk(id: String!): AuctionEndedEvent

  """
  fetch data from the table: "auction_reserve_price_updated_event"
  """
  AuctionReservePriceUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): [AuctionReservePriceUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "auction_reserve_price_updated_event"
  """
  AuctionReservePriceUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): AuctionReservePriceUpdatedEvent_aggregate!

  """
  fetch data from the table: "auction_reserve_price_updated_event" using primary key columns
  """
  AuctionReservePriceUpdatedEvent_by_pk(id: String!): AuctionReservePriceUpdatedEvent

  """
  fetch aggregated fields from the table: "auction"
  """
  Auction_aggregate(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): Auction_aggregate!

  """fetch data from the table: "auction" using primary key columns"""
  Auction_by_pk(auctionId: String!): Auction

  """
  fetch data from the table: "currency"
  """
  Currency(
    """distinct select on columns"""
    distinct_on: [Currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Currency_order_by!]

    """filter the rows returned"""
    where: Currency_bool_exp
  ): [Currency!]!

  """
  fetch aggregated fields from the table: "currency"
  """
  Currency_aggregate(
    """distinct select on columns"""
    distinct_on: [Currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Currency_order_by!]

    """filter the rows returned"""
    where: Currency_bool_exp
  ): Currency_aggregate!

  """fetch data from the table: "currency" using primary key columns"""
  Currency_by_pk(address: String!): Currency

  """
  fetch data from the table: "raw_log"
  """
  EventLog(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """
  fetch aggregated fields from the table: "raw_log"
  """
  EventLog_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """fetch data from the table: "raw_log" using primary key columns"""
  EventLog_by_pk(id: String!): EventLog

  """
  fetch data from the table: "ask"
  """
  MarketAsk(
    """distinct select on columns"""
    distinct_on: [MarketAsk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAsk_order_by!]

    """filter the rows returned"""
    where: MarketAsk_bool_exp
  ): [MarketAsk!]!

  """
  fetch data from the table: "ask_event"
  """
  MarketAskEvent(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): [MarketAskEvent!]!

  """
  fetch aggregated fields from the table: "ask_event"
  """
  MarketAskEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): MarketAskEvent_aggregate!

  """fetch data from the table: "ask_event" using primary key columns"""
  MarketAskEvent_by_pk(id: String!): MarketAskEvent

  """
  fetch aggregated fields from the table: "ask"
  """
  MarketAsk_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAsk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAsk_order_by!]

    """filter the rows returned"""
    where: MarketAsk_bool_exp
  ): MarketAsk_aggregate!

  """
  fetch data from the table: "bid"
  """
  MarketBid(
    """distinct select on columns"""
    distinct_on: [MarketBid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBid_order_by!]

    """filter the rows returned"""
    where: MarketBid_bool_exp
  ): [MarketBid!]!

  """
  fetch data from the table: "bid_event"
  """
  MarketBidEvent(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): [MarketBidEvent!]!

  """
  fetch aggregated fields from the table: "bid_event"
  """
  MarketBidEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): MarketBidEvent_aggregate!

  """fetch data from the table: "bid_event" using primary key columns"""
  MarketBidEvent_by_pk(id: String!): MarketBidEvent

  """
  fetch data from the table: "bid_share"
  """
  MarketBidShare(
    """distinct select on columns"""
    distinct_on: [MarketBidShare_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShare_order_by!]

    """filter the rows returned"""
    where: MarketBidShare_bool_exp
  ): [MarketBidShare!]!

  """
  fetch data from the table: "bid_share_event"
  """
  MarketBidShareEvent(
    """distinct select on columns"""
    distinct_on: [MarketBidShareEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShareEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidShareEvent_bool_exp
  ): [MarketBidShareEvent!]!

  """
  fetch aggregated fields from the table: "bid_share_event"
  """
  MarketBidShareEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidShareEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShareEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidShareEvent_bool_exp
  ): MarketBidShareEvent_aggregate!

  """fetch data from the table: "bid_share_event" using primary key columns"""
  MarketBidShareEvent_by_pk(id: String!): MarketBidShareEvent

  """
  fetch aggregated fields from the table: "bid_share"
  """
  MarketBidShare_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidShare_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShare_order_by!]

    """filter the rows returned"""
    where: MarketBidShare_bool_exp
  ): MarketBidShare_aggregate!

  """
  fetch aggregated fields from the table: "bid"
  """
  MarketBid_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBid_order_by!]

    """filter the rows returned"""
    where: MarketBid_bool_exp
  ): MarketBid_aggregate!

  """fetch data from the table: "bid" using primary key columns"""
  MarketBid_by_pk(id: String!): MarketBid

  """
  fetch data from the table: "media"
  """
  Media(
    """distinct select on columns"""
    distinct_on: [Media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Media_order_by!]

    """filter the rows returned"""
    where: Media_bool_exp
  ): [Media!]!

  """
  fetch data from the table: "metadata"
  """
  MediaMetadata(
    """distinct select on columns"""
    distinct_on: [MediaMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMetadata_order_by!]

    """filter the rows returned"""
    where: MediaMetadata_bool_exp
  ): [MediaMetadata!]!

  """
  fetch aggregated fields from the table: "metadata"
  """
  MediaMetadata_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMetadata_order_by!]

    """filter the rows returned"""
    where: MediaMetadata_bool_exp
  ): MediaMetadata_aggregate!

  """fetch data from the table: "metadata" using primary key columns"""
  MediaMetadata_by_pk(id: String!): MediaMetadata

  """
  fetch data from the table: "mint_event"
  """
  MediaMint(
    """distinct select on columns"""
    distinct_on: [MediaMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMint_order_by!]

    """filter the rows returned"""
    where: MediaMint_bool_exp
  ): [MediaMint!]!

  """
  fetch aggregated fields from the table: "mint_event"
  """
  MediaMint_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMint_order_by!]

    """filter the rows returned"""
    where: MediaMint_bool_exp
  ): MediaMint_aggregate!

  """fetch data from the table: "mint_event" using primary key columns"""
  MediaMint_by_pk(id: String!): MediaMint

  """
  fetch data from the table: "metadata_uri_updated_event"
  """
  MediaTokenMetadataURIUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): [MediaTokenMetadataURIUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "metadata_uri_updated_event"
  """
  MediaTokenMetadataURIUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): MediaTokenMetadataURIUpdatedEvent_aggregate!

  """
  fetch data from the table: "metadata_uri_updated_event" using primary key columns
  """
  MediaTokenMetadataURIUpdatedEvent_by_pk(id: String!): MediaTokenMetadataURIUpdatedEvent

  """
  fetch data from the table: "media_uri_updated_event"
  """
  MediaTokenURIUpdatedEvent(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): [MediaTokenURIUpdatedEvent!]!

  """
  fetch aggregated fields from the table: "media_uri_updated_event"
  """
  MediaTokenURIUpdatedEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): MediaTokenURIUpdatedEvent_aggregate!

  """
  fetch data from the table: "media_uri_updated_event" using primary key columns
  """
  MediaTokenURIUpdatedEvent_by_pk(id: String!): MediaTokenURIUpdatedEvent

  """
  fetch aggregated fields from the table: "media"
  """
  Media_aggregate(
    """distinct select on columns"""
    distinct_on: [Media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Media_order_by!]

    """filter the rows returned"""
    where: Media_bool_exp
  ): Media_aggregate!

  """fetch data from the table: "media" using primary key columns"""
  Media_by_pk(tokenId: String!): Media

  """
  fetch data from the table: "token"
  """
  Token(
    """distinct select on columns"""
    distinct_on: [Token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Token_order_by!]

    """filter the rows returned"""
    where: Token_bool_exp
  ): [Token!]!

  """
  fetch data from the table: "nft_contract"
  """
  TokenContract(
    """distinct select on columns"""
    distinct_on: [TokenContract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenContract_order_by!]

    """filter the rows returned"""
    where: TokenContract_bool_exp
  ): [TokenContract!]!

  """
  fetch aggregated fields from the table: "nft_contract"
  """
  TokenContract_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenContract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenContract_order_by!]

    """filter the rows returned"""
    where: TokenContract_bool_exp
  ): TokenContract_aggregate!

  """fetch data from the table: "nft_contract" using primary key columns"""
  TokenContract_by_pk(address: String!): TokenContract

  """
  fetch data from the table: "nft_metadata"
  """
  TokenMetadata(
    """distinct select on columns"""
    distinct_on: [TokenMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMetadata_order_by!]

    """filter the rows returned"""
    where: TokenMetadata_bool_exp
  ): [TokenMetadata!]!

  """
  fetch aggregated fields from the table: "nft_metadata"
  """
  TokenMetadata_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenMetadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMetadata_order_by!]

    """filter the rows returned"""
    where: TokenMetadata_bool_exp
  ): TokenMetadata_aggregate!

  """fetch data from the table: "nft_metadata" using primary key columns"""
  TokenMetadata_by_pk(id: uuid!): TokenMetadata

  """
  fetch data from the table: "nft_transfer_event"
  """
  TokenTransferEvent(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): [TokenTransferEvent!]!

  """
  fetch aggregated fields from the table: "nft_transfer_event"
  """
  TokenTransferEvent_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): TokenTransferEvent_aggregate!

  """
  fetch data from the table: "nft_transfer_event" using primary key columns
  """
  TokenTransferEvent_by_pk(id: String!): TokenTransferEvent

  """
  fetch aggregated fields from the table: "token"
  """
  Token_aggregate(
    """distinct select on columns"""
    distinct_on: [Token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Token_order_by!]

    """filter the rows returned"""
    where: Token_bool_exp
  ): Token_aggregate!

  """fetch data from the table: "token" using primary key columns"""
  Token_by_pk(id: String!): Token

  """
  fetch data from the table: "transaction"
  """
  Transaction(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!

  """
  fetch aggregated fields from the table: "transaction"
  """
  Transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): Transaction_aggregate!

  """fetch data from the table: "transaction" using primary key columns"""
  Transaction_by_pk(hash: String!): Transaction
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "token"
"""
type Token {
  address: String!

  """An array relationship"""
  auctions(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): [Auction!]!

  """An aggregate relationship"""
  auctions_aggregate(
    """distinct select on columns"""
    distinct_on: [Auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auction_order_by!]

    """filter the rows returned"""
    where: Auction_bool_exp
  ): Auction_aggregate!
  id: String!

  """An object relationship"""
  media: Media

  """An object relationship"""
  metadata: TokenMetadata
  metadataId: uuid

  """An object relationship"""
  mintTransferEvent: TokenTransferEvent
  mintTransferEventId: String
  minter: String
  name: String
  owner: String!
  supportsMetadata: Boolean
  symbol: String

  """An object relationship"""
  tokenContract: TokenContract
  tokenId: String!
  tokenURI: String

  """An array relationship"""
  transferEvents(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): [TokenTransferEvent!]!

  """An aggregate relationship"""
  transferEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): TokenTransferEvent_aggregate!
}

"""
aggregated selection of "token"
"""
type Token_aggregate {
  aggregate: Token_aggregate_fields
  nodes: [Token!]!
}

"""
aggregate fields of "token"
"""
type Token_aggregate_fields {
  count(columns: [Token_select_column!], distinct: Boolean): Int!
  max: Token_max_fields
  min: Token_min_fields
}

"""
Boolean expression to filter rows from the table "token". All fields are combined with a logical 'AND'.
"""
input Token_bool_exp {
  _and: [Token_bool_exp!]
  _not: Token_bool_exp
  _or: [Token_bool_exp!]
  address: String_comparison_exp
  auctions: Auction_bool_exp
  id: String_comparison_exp
  media: Media_bool_exp
  metadata: TokenMetadata_bool_exp
  metadataId: uuid_comparison_exp
  mintTransferEvent: TokenTransferEvent_bool_exp
  mintTransferEventId: String_comparison_exp
  minter: String_comparison_exp
  name: String_comparison_exp
  owner: String_comparison_exp
  supportsMetadata: Boolean_comparison_exp
  symbol: String_comparison_exp
  tokenContract: TokenContract_bool_exp
  tokenId: String_comparison_exp
  tokenURI: String_comparison_exp
  transferEvents: TokenTransferEvent_bool_exp
}

"""aggregate max on columns"""
type Token_max_fields {
  address: String
  id: String
  metadataId: uuid
  mintTransferEventId: String
  minter: String
  name: String
  owner: String
  symbol: String
  tokenId: String
  tokenURI: String
}

"""aggregate min on columns"""
type Token_min_fields {
  address: String
  id: String
  metadataId: uuid
  mintTransferEventId: String
  minter: String
  name: String
  owner: String
  symbol: String
  tokenId: String
  tokenURI: String
}

"""Ordering options when selecting data from "token"."""
input Token_order_by {
  address: order_by
  auctions_aggregate: Auction_aggregate_order_by
  id: order_by
  media: Media_order_by
  metadata: TokenMetadata_order_by
  metadataId: order_by
  mintTransferEvent: TokenTransferEvent_order_by
  mintTransferEventId: order_by
  minter: order_by
  name: order_by
  owner: order_by
  supportsMetadata: order_by
  symbol: order_by
  tokenContract: TokenContract_order_by
  tokenId: order_by
  tokenURI: order_by
  transferEvents_aggregate: TokenTransferEvent_aggregate_order_by
}

"""
select columns of table "token"
"""
enum Token_select_column {
  """column name"""
  address

  """column name"""
  id

  """column name"""
  metadataId

  """column name"""
  mintTransferEventId

  """column name"""
  minter

  """column name"""
  name

  """column name"""
  owner

  """column name"""
  supportsMetadata

  """column name"""
  symbol

  """column name"""
  tokenId

  """column name"""
  tokenURI
}

"""
columns and relationships of "nft_contract"
"""
type TokenContract {
  address: String!
  deployedAtBlockNumber: Int
  name: String
  status: nft_contract_status_enum!
  supportsMetadata: Boolean
  symbol: String
}

"""
aggregated selection of "nft_contract"
"""
type TokenContract_aggregate {
  aggregate: TokenContract_aggregate_fields
  nodes: [TokenContract!]!
}

"""
aggregate fields of "nft_contract"
"""
type TokenContract_aggregate_fields {
  avg: TokenContract_avg_fields
  count(columns: [TokenContract_select_column!], distinct: Boolean): Int!
  max: TokenContract_max_fields
  min: TokenContract_min_fields
  stddev: TokenContract_stddev_fields
  stddev_pop: TokenContract_stddev_pop_fields
  stddev_samp: TokenContract_stddev_samp_fields
  sum: TokenContract_sum_fields
  var_pop: TokenContract_var_pop_fields
  var_samp: TokenContract_var_samp_fields
  variance: TokenContract_variance_fields
}

"""aggregate avg on columns"""
type TokenContract_avg_fields {
  deployedAtBlockNumber: Float
}

"""
Boolean expression to filter rows from the table "nft_contract". All fields are combined with a logical 'AND'.
"""
input TokenContract_bool_exp {
  _and: [TokenContract_bool_exp!]
  _not: TokenContract_bool_exp
  _or: [TokenContract_bool_exp!]
  address: String_comparison_exp
  deployedAtBlockNumber: Int_comparison_exp
  name: String_comparison_exp
  status: nft_contract_status_enum_comparison_exp
  supportsMetadata: Boolean_comparison_exp
  symbol: String_comparison_exp
}

"""aggregate max on columns"""
type TokenContract_max_fields {
  address: String
  deployedAtBlockNumber: Int
  name: String
  symbol: String
}

"""aggregate min on columns"""
type TokenContract_min_fields {
  address: String
  deployedAtBlockNumber: Int
  name: String
  symbol: String
}

"""Ordering options when selecting data from "nft_contract"."""
input TokenContract_order_by {
  address: order_by
  deployedAtBlockNumber: order_by
  name: order_by
  status: order_by
  supportsMetadata: order_by
  symbol: order_by
}

"""
select columns of table "nft_contract"
"""
enum TokenContract_select_column {
  """column name"""
  address

  """column name"""
  deployedAtBlockNumber

  """column name"""
  name

  """column name"""
  status

  """column name"""
  supportsMetadata

  """column name"""
  symbol
}

"""aggregate stddev on columns"""
type TokenContract_stddev_fields {
  deployedAtBlockNumber: Float
}

"""aggregate stddev_pop on columns"""
type TokenContract_stddev_pop_fields {
  deployedAtBlockNumber: Float
}

"""aggregate stddev_samp on columns"""
type TokenContract_stddev_samp_fields {
  deployedAtBlockNumber: Float
}

"""aggregate sum on columns"""
type TokenContract_sum_fields {
  deployedAtBlockNumber: Int
}

"""aggregate var_pop on columns"""
type TokenContract_var_pop_fields {
  deployedAtBlockNumber: Float
}

"""aggregate var_samp on columns"""
type TokenContract_var_samp_fields {
  deployedAtBlockNumber: Float
}

"""aggregate variance on columns"""
type TokenContract_variance_fields {
  deployedAtBlockNumber: Float
}

"""
columns and relationships of "nft_metadata"
"""
type TokenMetadata {
  address: String!
  createdAt: timestamp!
  id: uuid!
  json(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  token: Token
  tokenId: String!
  tokenURI: String!
}

"""
aggregated selection of "nft_metadata"
"""
type TokenMetadata_aggregate {
  aggregate: TokenMetadata_aggregate_fields
  nodes: [TokenMetadata!]!
}

"""
aggregate fields of "nft_metadata"
"""
type TokenMetadata_aggregate_fields {
  count(columns: [TokenMetadata_select_column!], distinct: Boolean): Int!
  max: TokenMetadata_max_fields
  min: TokenMetadata_min_fields
}

"""
Boolean expression to filter rows from the table "nft_metadata". All fields are combined with a logical 'AND'.
"""
input TokenMetadata_bool_exp {
  _and: [TokenMetadata_bool_exp!]
  _not: TokenMetadata_bool_exp
  _or: [TokenMetadata_bool_exp!]
  address: String_comparison_exp
  createdAt: timestamp_comparison_exp
  id: uuid_comparison_exp
  json: jsonb_comparison_exp
  token: Token_bool_exp
  tokenId: String_comparison_exp
  tokenURI: String_comparison_exp
}

"""aggregate max on columns"""
type TokenMetadata_max_fields {
  address: String
  createdAt: timestamp
  id: uuid
  tokenId: String
  tokenURI: String
}

"""aggregate min on columns"""
type TokenMetadata_min_fields {
  address: String
  createdAt: timestamp
  id: uuid
  tokenId: String
  tokenURI: String
}

"""Ordering options when selecting data from "nft_metadata"."""
input TokenMetadata_order_by {
  address: order_by
  createdAt: order_by
  id: order_by
  json: order_by
  token: Token_order_by
  tokenId: order_by
  tokenURI: order_by
}

"""
select columns of table "nft_metadata"
"""
enum TokenMetadata_select_column {
  """column name"""
  address

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  json

  """column name"""
  tokenId

  """column name"""
  tokenURI
}

"""
columns and relationships of "nft_transfer_event"
"""
type TokenTransferEvent {
  address: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An object relationship"""
  eventLog: EventLog!
  from: String!
  id: String!
  logIndex: Int!

  """An object relationship"""
  media: Media
  rawLogId: String!
  to: String!

  """An object relationship"""
  token: Token
  tokenId: String!

  """An object relationship"""
  transaction: Transaction!
  transactionHash: String!
}

"""
aggregated selection of "nft_transfer_event"
"""
type TokenTransferEvent_aggregate {
  aggregate: TokenTransferEvent_aggregate_fields
  nodes: [TokenTransferEvent!]!
}

"""
aggregate fields of "nft_transfer_event"
"""
type TokenTransferEvent_aggregate_fields {
  avg: TokenTransferEvent_avg_fields
  count(columns: [TokenTransferEvent_select_column!], distinct: Boolean): Int!
  max: TokenTransferEvent_max_fields
  min: TokenTransferEvent_min_fields
  stddev: TokenTransferEvent_stddev_fields
  stddev_pop: TokenTransferEvent_stddev_pop_fields
  stddev_samp: TokenTransferEvent_stddev_samp_fields
  sum: TokenTransferEvent_sum_fields
  var_pop: TokenTransferEvent_var_pop_fields
  var_samp: TokenTransferEvent_var_samp_fields
  variance: TokenTransferEvent_variance_fields
}

"""
order by aggregate values of table "nft_transfer_event"
"""
input TokenTransferEvent_aggregate_order_by {
  avg: TokenTransferEvent_avg_order_by
  count: order_by
  max: TokenTransferEvent_max_order_by
  min: TokenTransferEvent_min_order_by
  stddev: TokenTransferEvent_stddev_order_by
  stddev_pop: TokenTransferEvent_stddev_pop_order_by
  stddev_samp: TokenTransferEvent_stddev_samp_order_by
  sum: TokenTransferEvent_sum_order_by
  var_pop: TokenTransferEvent_var_pop_order_by
  var_samp: TokenTransferEvent_var_samp_order_by
  variance: TokenTransferEvent_variance_order_by
}

"""aggregate avg on columns"""
type TokenTransferEvent_avg_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by avg() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_avg_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
Boolean expression to filter rows from the table "nft_transfer_event". All fields are combined with a logical 'AND'.
"""
input TokenTransferEvent_bool_exp {
  _and: [TokenTransferEvent_bool_exp!]
  _not: TokenTransferEvent_bool_exp
  _or: [TokenTransferEvent_bool_exp!]
  address: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLog: EventLog_bool_exp
  from: String_comparison_exp
  id: String_comparison_exp
  logIndex: Int_comparison_exp
  media: Media_bool_exp
  rawLogId: String_comparison_exp
  to: String_comparison_exp
  token: Token_bool_exp
  tokenId: String_comparison_exp
  transaction: Transaction_bool_exp
  transactionHash: String_comparison_exp
}

"""aggregate max on columns"""
type TokenTransferEvent_max_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  from: String
  id: String
  logIndex: Int
  rawLogId: String
  to: String
  tokenId: String
  transactionHash: String
}

"""
order by max() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_max_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  from: order_by
  id: order_by
  logIndex: order_by
  rawLogId: order_by
  to: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""aggregate min on columns"""
type TokenTransferEvent_min_fields {
  address: String
  blockNumber: Int
  blockTimestamp: timestamp
  from: String
  id: String
  logIndex: Int
  rawLogId: String
  to: String
  tokenId: String
  transactionHash: String
}

"""
order by min() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_min_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  from: order_by
  id: order_by
  logIndex: order_by
  rawLogId: order_by
  to: order_by
  tokenId: order_by
  transactionHash: order_by
}

"""Ordering options when selecting data from "nft_transfer_event"."""
input TokenTransferEvent_order_by {
  address: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLog: EventLog_order_by
  from: order_by
  id: order_by
  logIndex: order_by
  media: Media_order_by
  rawLogId: order_by
  to: order_by
  token: Token_order_by
  tokenId: order_by
  transaction: Transaction_order_by
  transactionHash: order_by
}

"""
select columns of table "nft_transfer_event"
"""
enum TokenTransferEvent_select_column {
  """column name"""
  address

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  from

  """column name"""
  id

  """column name"""
  logIndex

  """column name"""
  rawLogId

  """column name"""
  to

  """column name"""
  tokenId

  """column name"""
  transactionHash
}

"""aggregate stddev on columns"""
type TokenTransferEvent_stddev_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_stddev_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_pop on columns"""
type TokenTransferEvent_stddev_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_pop() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_stddev_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate stddev_samp on columns"""
type TokenTransferEvent_stddev_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by stddev_samp() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_stddev_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate sum on columns"""
type TokenTransferEvent_sum_fields {
  blockNumber: Int
  logIndex: Int
}

"""
order by sum() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_sum_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_pop on columns"""
type TokenTransferEvent_var_pop_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_pop() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_var_pop_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate var_samp on columns"""
type TokenTransferEvent_var_samp_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by var_samp() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_var_samp_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""aggregate variance on columns"""
type TokenTransferEvent_variance_fields {
  blockNumber: Float
  logIndex: Float
}

"""
order by variance() on columns of table "nft_transfer_event"
"""
input TokenTransferEvent_variance_order_by {
  blockNumber: order_by
  logIndex: order_by
}

"""
columns and relationships of "transaction"
"""
type Transaction {
  """An array relationship"""
  auctionApprovalUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): [AuctionApprovalUpdatedEvent!]!

  """An aggregate relationship"""
  auctionApprovalUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionApprovalUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionApprovalUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionApprovalUpdatedEvent_bool_exp
  ): AuctionApprovalUpdatedEvent_aggregate!

  """An array relationship"""
  auctionBidEvents(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): [AuctionBidEvent!]!

  """An aggregate relationship"""
  auctionBidEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionBidEvent_order_by!]

    """filter the rows returned"""
    where: AuctionBidEvent_bool_exp
  ): AuctionBidEvent_aggregate!

  """An array relationship"""
  auctionCanceledEvents(
    """distinct select on columns"""
    distinct_on: [AuctionCanceledEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCanceledEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCanceledEvent_bool_exp
  ): [AuctionCanceledEvent!]!

  """An aggregate relationship"""
  auctionCanceledEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionCanceledEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCanceledEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCanceledEvent_bool_exp
  ): AuctionCanceledEvent_aggregate!

  """An array relationship"""
  auctionCreatedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionCreatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCreatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCreatedEvent_bool_exp
  ): [AuctionCreatedEvent!]!

  """An aggregate relationship"""
  auctionCreatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionCreatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionCreatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionCreatedEvent_bool_exp
  ): AuctionCreatedEvent_aggregate!

  """An array relationship"""
  auctionDurationExtendedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): [AuctionDurationExtendedEvent!]!

  """An aggregate relationship"""
  auctionDurationExtendedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionDurationExtendedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionDurationExtendedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionDurationExtendedEvent_bool_exp
  ): AuctionDurationExtendedEvent_aggregate!

  """An array relationship"""
  auctionEndedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionEndedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionEndedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionEndedEvent_bool_exp
  ): [AuctionEndedEvent!]!

  """An aggregate relationship"""
  auctionEndedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionEndedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionEndedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionEndedEvent_bool_exp
  ): AuctionEndedEvent_aggregate!

  """An array relationship"""
  auctionReservePriceUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): [AuctionReservePriceUpdatedEvent!]!

  """An aggregate relationship"""
  auctionReservePriceUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [AuctionReservePriceUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [AuctionReservePriceUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: AuctionReservePriceUpdatedEvent_bool_exp
  ): AuctionReservePriceUpdatedEvent_aggregate!
  blockHash: String!
  blockNumber: Int!
  blockTimestamp: timestamp!

  """An array relationship"""
  eventLogs(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """An aggregate relationship"""
  eventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!
  failureReason: String
  from: String!
  gas: Int!
  gasPrice: String!
  hash: String!
  input: String!

  """An array relationship"""
  marketAskEvents(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): [MarketAskEvent!]!

  """An aggregate relationship"""
  marketAskEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketAskEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketAskEvent_order_by!]

    """filter the rows returned"""
    where: MarketAskEvent_bool_exp
  ): MarketAskEvent_aggregate!

  """An array relationship"""
  marketBidEvents(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): [MarketBidEvent!]!

  """An aggregate relationship"""
  marketBidEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidEvent_bool_exp
  ): MarketBidEvent_aggregate!

  """An array relationship"""
  marketBidShareEvents(
    """distinct select on columns"""
    distinct_on: [MarketBidShareEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShareEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidShareEvent_bool_exp
  ): [MarketBidShareEvent!]!

  """An aggregate relationship"""
  marketBidShareEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MarketBidShareEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MarketBidShareEvent_order_by!]

    """filter the rows returned"""
    where: MarketBidShareEvent_bool_exp
  ): MarketBidShareEvent_aggregate!

  """An array relationship"""
  mediaMints(
    """distinct select on columns"""
    distinct_on: [MediaMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMint_order_by!]

    """filter the rows returned"""
    where: MediaMint_bool_exp
  ): [MediaMint!]!

  """An aggregate relationship"""
  mediaMints_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaMint_order_by!]

    """filter the rows returned"""
    where: MediaMint_bool_exp
  ): MediaMint_aggregate!

  """An array relationship"""
  mediaTokenMetadataURIUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): [MediaTokenMetadataURIUpdatedEvent!]!

  """An aggregate relationship"""
  mediaTokenMetadataURIUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenMetadataURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenMetadataURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenMetadataURIUpdatedEvent_bool_exp
  ): MediaTokenMetadataURIUpdatedEvent_aggregate!

  """An array relationship"""
  mediaTokenURIUpdatedEvents(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): [MediaTokenURIUpdatedEvent!]!

  """An aggregate relationship"""
  mediaTokenURIUpdatedEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [MediaTokenURIUpdatedEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MediaTokenURIUpdatedEvent_order_by!]

    """filter the rows returned"""
    where: MediaTokenURIUpdatedEvent_bool_exp
  ): MediaTokenURIUpdatedEvent_aggregate!
  network: String!
  nonce: Int!
  status: String!
  to: String

  """An array relationship"""
  tokenTransferEvents(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): [TokenTransferEvent!]!

  """An aggregate relationship"""
  tokenTransferEvents_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenTransferEvent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenTransferEvent_order_by!]

    """filter the rows returned"""
    where: TokenTransferEvent_bool_exp
  ): TokenTransferEvent_aggregate!
  transactionIndex: Int!
  value: String!
}

"""
aggregated selection of "transaction"
"""
type Transaction_aggregate {
  aggregate: Transaction_aggregate_fields
  nodes: [Transaction!]!
}

"""
aggregate fields of "transaction"
"""
type Transaction_aggregate_fields {
  avg: Transaction_avg_fields
  count(columns: [Transaction_select_column!], distinct: Boolean): Int!
  max: Transaction_max_fields
  min: Transaction_min_fields
  stddev: Transaction_stddev_fields
  stddev_pop: Transaction_stddev_pop_fields
  stddev_samp: Transaction_stddev_samp_fields
  sum: Transaction_sum_fields
  var_pop: Transaction_var_pop_fields
  var_samp: Transaction_var_samp_fields
  variance: Transaction_variance_fields
}

"""aggregate avg on columns"""
type Transaction_avg_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

"""
Boolean expression to filter rows from the table "transaction". All fields are combined with a logical 'AND'.
"""
input Transaction_bool_exp {
  _and: [Transaction_bool_exp!]
  _not: Transaction_bool_exp
  _or: [Transaction_bool_exp!]
  auctionApprovalUpdatedEvents: AuctionApprovalUpdatedEvent_bool_exp
  auctionBidEvents: AuctionBidEvent_bool_exp
  auctionCanceledEvents: AuctionCanceledEvent_bool_exp
  auctionCreatedEvents: AuctionCreatedEvent_bool_exp
  auctionDurationExtendedEvents: AuctionDurationExtendedEvent_bool_exp
  auctionEndedEvents: AuctionEndedEvent_bool_exp
  auctionReservePriceUpdatedEvents: AuctionReservePriceUpdatedEvent_bool_exp
  blockHash: String_comparison_exp
  blockNumber: Int_comparison_exp
  blockTimestamp: timestamp_comparison_exp
  eventLogs: EventLog_bool_exp
  failureReason: String_comparison_exp
  from: String_comparison_exp
  gas: Int_comparison_exp
  gasPrice: String_comparison_exp
  hash: String_comparison_exp
  input: String_comparison_exp
  marketAskEvents: MarketAskEvent_bool_exp
  marketBidEvents: MarketBidEvent_bool_exp
  marketBidShareEvents: MarketBidShareEvent_bool_exp
  mediaMints: MediaMint_bool_exp
  mediaTokenMetadataURIUpdatedEvents: MediaTokenMetadataURIUpdatedEvent_bool_exp
  mediaTokenURIUpdatedEvents: MediaTokenURIUpdatedEvent_bool_exp
  network: String_comparison_exp
  nonce: Int_comparison_exp
  status: String_comparison_exp
  to: String_comparison_exp
  tokenTransferEvents: TokenTransferEvent_bool_exp
  transactionIndex: Int_comparison_exp
  value: String_comparison_exp
}

"""aggregate max on columns"""
type Transaction_max_fields {
  blockHash: String
  blockNumber: Int
  blockTimestamp: timestamp
  failureReason: String
  from: String
  gas: Int
  gasPrice: String
  hash: String
  input: String
  network: String
  nonce: Int
  status: String
  to: String
  transactionIndex: Int
  value: String
}

"""aggregate min on columns"""
type Transaction_min_fields {
  blockHash: String
  blockNumber: Int
  blockTimestamp: timestamp
  failureReason: String
  from: String
  gas: Int
  gasPrice: String
  hash: String
  input: String
  network: String
  nonce: Int
  status: String
  to: String
  transactionIndex: Int
  value: String
}

"""Ordering options when selecting data from "transaction"."""
input Transaction_order_by {
  auctionApprovalUpdatedEvents_aggregate: AuctionApprovalUpdatedEvent_aggregate_order_by
  auctionBidEvents_aggregate: AuctionBidEvent_aggregate_order_by
  auctionCanceledEvents_aggregate: AuctionCanceledEvent_aggregate_order_by
  auctionCreatedEvents_aggregate: AuctionCreatedEvent_aggregate_order_by
  auctionDurationExtendedEvents_aggregate: AuctionDurationExtendedEvent_aggregate_order_by
  auctionEndedEvents_aggregate: AuctionEndedEvent_aggregate_order_by
  auctionReservePriceUpdatedEvents_aggregate: AuctionReservePriceUpdatedEvent_aggregate_order_by
  blockHash: order_by
  blockNumber: order_by
  blockTimestamp: order_by
  eventLogs_aggregate: EventLog_aggregate_order_by
  failureReason: order_by
  from: order_by
  gas: order_by
  gasPrice: order_by
  hash: order_by
  input: order_by
  marketAskEvents_aggregate: MarketAskEvent_aggregate_order_by
  marketBidEvents_aggregate: MarketBidEvent_aggregate_order_by
  marketBidShareEvents_aggregate: MarketBidShareEvent_aggregate_order_by
  mediaMints_aggregate: MediaMint_aggregate_order_by
  mediaTokenMetadataURIUpdatedEvents_aggregate: MediaTokenMetadataURIUpdatedEvent_aggregate_order_by
  mediaTokenURIUpdatedEvents_aggregate: MediaTokenURIUpdatedEvent_aggregate_order_by
  network: order_by
  nonce: order_by
  status: order_by
  to: order_by
  tokenTransferEvents_aggregate: TokenTransferEvent_aggregate_order_by
  transactionIndex: order_by
  value: order_by
}

"""
select columns of table "transaction"
"""
enum Transaction_select_column {
  """column name"""
  blockHash

  """column name"""
  blockNumber

  """column name"""
  blockTimestamp

  """column name"""
  failureReason

  """column name"""
  from

  """column name"""
  gas

  """column name"""
  gasPrice

  """column name"""
  hash

  """column name"""
  input

  """column name"""
  network

  """column name"""
  nonce

  """column name"""
  status

  """column name"""
  to

  """column name"""
  transactionIndex

  """column name"""
  value
}

"""aggregate stddev on columns"""
type Transaction_stddev_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

"""aggregate stddev_pop on columns"""
type Transaction_stddev_pop_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

"""aggregate stddev_samp on columns"""
type Transaction_stddev_samp_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

"""aggregate sum on columns"""
type Transaction_sum_fields {
  blockNumber: Int
  gas: Int
  nonce: Int
  transactionIndex: Int
}

"""aggregate var_pop on columns"""
type Transaction_var_pop_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

"""aggregate var_samp on columns"""
type Transaction_var_samp_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

"""aggregate variance on columns"""
type Transaction_variance_fields {
  blockNumber: Float
  gas: Float
  nonce: Float
  transactionIndex: Float
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

